// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Octree: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<Vector3> BoundingBoxMinAttr = new ("Bounding Box Min", VariantType.VarVector3, new Variant(new Vector3(-1000f, -1000f, -1000f)), _=>((Octree)_).BoundingBoxMin, (_,v)=>((Octree)_).BoundingBoxMin = v);
        protected static readonly RbfxAttribute<Vector3> BoundingBoxMaxAttr = new ("Bounding Box Max", VariantType.VarVector3, new Variant(new Vector3(1000f, 1000f, 1000f)), _=>((Octree)_).BoundingBoxMax, (_,v)=>((Octree)_).BoundingBoxMax = v);
        protected static readonly RbfxAttribute<int> NumberofLevelsAttr = new ("Number of Levels", VariantType.VarInt, new Variant(8), _=>((Octree)_).NumberofLevels, (_,v)=>((Octree)_).NumberofLevels = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return BoundingBoxMinAttr;
            yield return BoundingBoxMaxAttr;
            yield return NumberofLevelsAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected Vector3 _boundingBoxMin = new Vector3(-1000f, -1000f, -1000f);

        protected Vector3 _boundingBoxMax = new Vector3(1000f, 1000f, 1000f);

        protected int _numberofLevels = 8;

        public Vector3 BoundingBoxMin
        {
            get => _boundingBoxMin;
            set => _boundingBoxMin = value;
        }

        public Vector3 BoundingBoxMax
        {
            get => _boundingBoxMax;
            set => _boundingBoxMax = value;
        }

        public int NumberofLevels
        {
            get => _numberofLevels;
            set => _numberofLevels = value;
        }
    }
}

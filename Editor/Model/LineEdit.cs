// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class LineEdit: UnityToRebelFork.Editor.BorderImage
    {
        protected static readonly RbfxAttribute<int> MaxLengthAttr = new ("Max Length", VariantType.VarInt, new Variant(0), _=>((LineEdit)_).MaxLength, (_,v)=>((LineEdit)_).MaxLength = v);
        protected static readonly RbfxAttribute<bool> IsCursorMovableAttr = new ("Is Cursor Movable", VariantType.VarBool, new Variant(true), _=>((LineEdit)_).IsCursorMovable, (_,v)=>((LineEdit)_).IsCursorMovable = v);
        protected static readonly RbfxAttribute<bool> IsTextSelectableAttr = new ("Is Text Selectable", VariantType.VarBool, new Variant(true), _=>((LineEdit)_).IsTextSelectable, (_,v)=>((LineEdit)_).IsTextSelectable = v);
        protected static readonly RbfxAttribute<bool> IsTextCopyableAttr = new ("Is Text Copyable", VariantType.VarBool, new Variant(true), _=>((LineEdit)_).IsTextCopyable, (_,v)=>((LineEdit)_).IsTextCopyable = v);
        protected static readonly RbfxAttribute<float> CursorBlinkRateAttr = new ("Cursor Blink Rate", VariantType.VarFloat, new Variant(1f), _=>((LineEdit)_).CursorBlinkRate, (_,v)=>((LineEdit)_).CursorBlinkRate = v);
        protected static readonly RbfxAttribute<int> EchoCharacterAttr = new ("Echo Character", VariantType.VarInt, new Variant(0), _=>((LineEdit)_).EchoCharacter, (_,v)=>((LineEdit)_).EchoCharacter = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return MaxLengthAttr;
            yield return IsCursorMovableAttr;
            yield return IsTextSelectableAttr;
            yield return IsTextCopyableAttr;
            yield return CursorBlinkRateAttr;
            yield return EchoCharacterAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected int _maxLength = 0;

        protected bool _isCursorMovable = true;

        protected bool _isTextSelectable = true;

        protected bool _isTextCopyable = true;

        protected float _cursorBlinkRate = 1f;

        protected int _echoCharacter = 0;

        public int MaxLength
        {
            get => _maxLength;
            set => _maxLength = value;
        }

        public bool IsCursorMovable
        {
            get => _isCursorMovable;
            set => _isCursorMovable = value;
        }

        public bool IsTextSelectable
        {
            get => _isTextSelectable;
            set => _isTextSelectable = value;
        }

        public bool IsTextCopyable
        {
            get => _isTextCopyable;
            set => _isTextCopyable = value;
        }

        public float CursorBlinkRate
        {
            get => _cursorBlinkRate;
            set => _cursorBlinkRate = value;
        }

        public int EchoCharacter
        {
            get => _echoCharacter;
            set => _echoCharacter = value;
        }
    }
}

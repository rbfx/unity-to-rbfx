// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ParticleEmitter: UnityToRebelFork.Editor.BillboardSet
    {
        protected static readonly RbfxAttribute<ResourceRef> EffectAttr = new ("Effect", VariantType.VarResourceRef, new Variant(new ResourceRef("ParticleEffect", "")), _=>((ParticleEmitter)_).Effect, (_,v)=>((ParticleEmitter)_).Effect = v);
        protected static readonly RbfxAttribute<bool> IsEmittingAttr = new ("Is Emitting", VariantType.VarBool, new Variant(true), _=>((ParticleEmitter)_).IsEmitting, (_,v)=>((ParticleEmitter)_).IsEmitting = v);
        protected static readonly RbfxAttribute<float> PeriodTimerAttr = new ("Period Timer", VariantType.VarFloat, new Variant(0f), _=>((ParticleEmitter)_).PeriodTimer, (_,v)=>((ParticleEmitter)_).PeriodTimer = v);
        protected static readonly RbfxAttribute<float> EmissionTimerAttr = new ("Emission Timer", VariantType.VarFloat, new Variant(0f), _=>((ParticleEmitter)_).EmissionTimer, (_,v)=>((ParticleEmitter)_).EmissionTimer = v);
        protected static readonly RbfxAttribute<string> AutoremoveModeAttr = new ("Autoremove Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.AutoremoveMode.Disabled), _=>((ParticleEmitter)_).AutoremoveMode, (_,v)=>((ParticleEmitter)_).AutoremoveMode = v);
        protected static readonly RbfxAttribute<VariantList> ParticlesAttr = new ("Particles", VariantType.VarVariantList, new Variant(new VariantList() {  }), _=>((ParticleEmitter)_).Particles, (_,v)=>((ParticleEmitter)_).Particles = v);
        protected static readonly RbfxAttribute<bool> SerializeParticlesAttr = new ("Serialize Particles", VariantType.VarBool, new Variant(true), _=>((ParticleEmitter)_).SerializeParticles, (_,v)=>((ParticleEmitter)_).SerializeParticles = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return EffectAttr;
            yield return IsEmittingAttr;
            yield return PeriodTimerAttr;
            yield return EmissionTimerAttr;
            yield return AutoremoveModeAttr;
            yield return ParticlesAttr;
            yield return SerializeParticlesAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected ResourceRef _effect = new ResourceRef("ParticleEffect", "");

        protected bool _isEmitting = true;

        protected float _periodTimer = 0f;

        protected float _emissionTimer = 0f;

        protected string _autoremoveMode = UnityToRebelFork.Editor.AutoremoveMode.Disabled;

        protected VariantList _particles = new VariantList() {  };

        protected bool _serializeParticles = true;

        public ResourceRef Effect
        {
            get => _effect;
            set => _effect = value;
        }

        public bool IsEmitting
        {
            get => _isEmitting;
            set => _isEmitting = value;
        }

        public float PeriodTimer
        {
            get => _periodTimer;
            set => _periodTimer = value;
        }

        public float EmissionTimer
        {
            get => _emissionTimer;
            set => _emissionTimer = value;
        }

        public string AutoremoveMode
        {
            get => _autoremoveMode;
            set => _autoremoveMode = value;
        }

        public VariantList Particles
        {
            get => _particles;
            set => _particles = value;
        }

        public bool SerializeParticles
        {
            get => _serializeParticles;
            set => _serializeParticles = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ConstraintPrismatic2D: UnityToRebelFork.Editor.Constraint2D
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((ConstraintPrismatic2D)_).IsEnabled, (_,v)=>((ConstraintPrismatic2D)_).IsEnabled = v);
        protected static readonly RbfxAttribute<Vector2> AnchorAttr = new ("Anchor", VariantType.VarVector2, new Variant(new Vector2(0f, 0f)), _=>((ConstraintPrismatic2D)_).Anchor, (_,v)=>((ConstraintPrismatic2D)_).Anchor = v);
        protected static readonly RbfxAttribute<Vector2> AxisAttr = new ("Axis", VariantType.VarVector2, new Variant(new Vector2(1f, 0f)), _=>((ConstraintPrismatic2D)_).Axis, (_,v)=>((ConstraintPrismatic2D)_).Axis = v);
        protected static readonly RbfxAttribute<bool> EnableLimitAttr = new ("Enable Limit", VariantType.VarBool, new Variant(false), _=>((ConstraintPrismatic2D)_).EnableLimit, (_,v)=>((ConstraintPrismatic2D)_).EnableLimit = v);
        protected static readonly RbfxAttribute<float> LowertranslationAttr = new ("Lower translation", VariantType.VarFloat, new Variant(0f), _=>((ConstraintPrismatic2D)_).Lowertranslation, (_,v)=>((ConstraintPrismatic2D)_).Lowertranslation = v);
        protected static readonly RbfxAttribute<float> UppertranslationAttr = new ("Upper translation", VariantType.VarFloat, new Variant(0f), _=>((ConstraintPrismatic2D)_).Uppertranslation, (_,v)=>((ConstraintPrismatic2D)_).Uppertranslation = v);
        protected static readonly RbfxAttribute<bool> EnableMotorAttr = new ("Enable Motor", VariantType.VarBool, new Variant(false), _=>((ConstraintPrismatic2D)_).EnableMotor, (_,v)=>((ConstraintPrismatic2D)_).EnableMotor = v);
        protected static readonly RbfxAttribute<float> MaxMotorForceAttr = new ("Max Motor Force", VariantType.VarFloat, new Variant(2f), _=>((ConstraintPrismatic2D)_).MaxMotorForce, (_,v)=>((ConstraintPrismatic2D)_).MaxMotorForce = v);
        protected static readonly RbfxAttribute<float> MotorSpeedAttr = new ("Motor Speed", VariantType.VarFloat, new Variant(0.7f), _=>((ConstraintPrismatic2D)_).MotorSpeed, (_,v)=>((ConstraintPrismatic2D)_).MotorSpeed = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return AnchorAttr;
            yield return AxisAttr;
            yield return EnableLimitAttr;
            yield return LowertranslationAttr;
            yield return UppertranslationAttr;
            yield return EnableMotorAttr;
            yield return MaxMotorForceAttr;
            yield return MotorSpeedAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected Vector2 _anchor = new Vector2(0f, 0f);

        protected Vector2 _axis = new Vector2(1f, 0f);

        protected bool _enableLimit = false;

        protected float _lowertranslation = 0f;

        protected float _uppertranslation = 0f;

        protected bool _enableMotor = false;

        protected float _maxMotorForce = 2f;

        protected float _motorSpeed = 0.7f;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public Vector2 Anchor
        {
            get => _anchor;
            set => _anchor = value;
        }

        public Vector2 Axis
        {
            get => _axis;
            set => _axis = value;
        }

        public bool EnableLimit
        {
            get => _enableLimit;
            set => _enableLimit = value;
        }

        public float Lowertranslation
        {
            get => _lowertranslation;
            set => _lowertranslation = value;
        }

        public float Uppertranslation
        {
            get => _uppertranslation;
            set => _uppertranslation = value;
        }

        public bool EnableMotor
        {
            get => _enableMotor;
            set => _enableMotor = value;
        }

        public float MaxMotorForce
        {
            get => _maxMotorForce;
            set => _maxMotorForce = value;
        }

        public float MotorSpeed
        {
            get => _motorSpeed;
            set => _motorSpeed = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ReplicatedAnimation: UnityToRebelFork.Editor.NetworkBehavior
    {
        protected static readonly RbfxAttribute<int> NumUploadAttemptsAttr = new ("Num Upload Attempts", VariantType.VarInt, new Variant(4), _=>((ReplicatedAnimation)_).NumUploadAttempts, (_,v)=>((ReplicatedAnimation)_).NumUploadAttempts = v);
        protected static readonly RbfxAttribute<bool> ReplicateOwnerAttr = new ("Replicate Owner", VariantType.VarBool, new Variant(false), _=>((ReplicatedAnimation)_).ReplicateOwner, (_,v)=>((ReplicatedAnimation)_).ReplicateOwner = v);
        protected static readonly RbfxAttribute<float> SmoothingTimeAttr = new ("Smoothing Time", VariantType.VarFloat, new Variant(0.2f), _=>((ReplicatedAnimation)_).SmoothingTime, (_,v)=>((ReplicatedAnimation)_).SmoothingTime = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return NumUploadAttemptsAttr;
            yield return ReplicateOwnerAttr;
            yield return SmoothingTimeAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected int _numUploadAttempts = 4;

        protected bool _replicateOwner = false;

        protected float _smoothingTime = 0.2f;

        public int NumUploadAttempts
        {
            get => _numUploadAttempts;
            set => _numUploadAttempts = value;
        }

        public bool ReplicateOwner
        {
            get => _replicateOwner;
            set => _replicateOwner = value;
        }

        public float SmoothingTime
        {
            get => _smoothingTime;
            set => _smoothingTime = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Button: UnityToRebelFork.Editor.BorderImage
    {
        protected static readonly RbfxAttribute<IntVector2> PressedImageOffsetAttr = new ("Pressed Image Offset", VariantType.VarIntVector2, new Variant(new IntVector2(0, 0)), _=>((Button)_).PressedImageOffset, (_,v)=>((Button)_).PressedImageOffset = v);
        protected static readonly RbfxAttribute<IntVector2> PressedChildOffsetAttr = new ("Pressed Child Offset", VariantType.VarIntVector2, new Variant(new IntVector2(0, 0)), _=>((Button)_).PressedChildOffset, (_,v)=>((Button)_).PressedChildOffset = v);
        protected static readonly RbfxAttribute<float> RepeatDelayAttr = new ("Repeat Delay", VariantType.VarFloat, new Variant(1f), _=>((Button)_).RepeatDelay, (_,v)=>((Button)_).RepeatDelay = v);
        protected static readonly RbfxAttribute<float> RepeatRateAttr = new ("Repeat Rate", VariantType.VarFloat, new Variant(0f), _=>((Button)_).RepeatRate, (_,v)=>((Button)_).RepeatRate = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return PressedImageOffsetAttr;
            yield return PressedChildOffsetAttr;
            yield return RepeatDelayAttr;
            yield return RepeatRateAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected IntVector2 _pressedImageOffset = new IntVector2(0, 0);

        protected IntVector2 _pressedChildOffset = new IntVector2(0, 0);

        protected float _repeatDelay = 1f;

        protected float _repeatRate = 0f;

        public IntVector2 PressedImageOffset
        {
            get => _pressedImageOffset;
            set => _pressedImageOffset = value;
        }

        public IntVector2 PressedChildOffset
        {
            get => _pressedChildOffset;
            set => _pressedChildOffset = value;
        }

        public float RepeatDelay
        {
            get => _repeatDelay;
            set => _repeatDelay = value;
        }

        public float RepeatRate
        {
            get => _repeatRate;
            set => _repeatRate = value;
        }
    }
}

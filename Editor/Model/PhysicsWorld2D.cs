// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class PhysicsWorld2D: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<bool> DrawShapeAttr = new ("Draw Shape", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).DrawShape, (_,v)=>((PhysicsWorld2D)_).DrawShape = v);
        protected static readonly RbfxAttribute<bool> DrawJointAttr = new ("Draw Joint", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).DrawJoint, (_,v)=>((PhysicsWorld2D)_).DrawJoint = v);
        protected static readonly RbfxAttribute<bool> DrawAabbAttr = new ("Draw Aabb", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).DrawAabb, (_,v)=>((PhysicsWorld2D)_).DrawAabb = v);
        protected static readonly RbfxAttribute<bool> DrawPairAttr = new ("Draw Pair", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).DrawPair, (_,v)=>((PhysicsWorld2D)_).DrawPair = v);
        protected static readonly RbfxAttribute<bool> DrawCenterOfMassAttr = new ("Draw CenterOfMass", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).DrawCenterOfMass, (_,v)=>((PhysicsWorld2D)_).DrawCenterOfMass = v);
        protected static readonly RbfxAttribute<bool> AllowSleepingAttr = new ("Allow Sleeping", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).AllowSleeping, (_,v)=>((PhysicsWorld2D)_).AllowSleeping = v);
        protected static readonly RbfxAttribute<bool> WarmStartingAttr = new ("Warm Starting", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).WarmStarting, (_,v)=>((PhysicsWorld2D)_).WarmStarting = v);
        protected static readonly RbfxAttribute<bool> ContinuousPhysicsAttr = new ("Continuous Physics", VariantType.VarBool, new Variant(true), _=>((PhysicsWorld2D)_).ContinuousPhysics, (_,v)=>((PhysicsWorld2D)_).ContinuousPhysics = v);
        protected static readonly RbfxAttribute<bool> SubSteppingAttr = new ("Sub Stepping", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).SubStepping, (_,v)=>((PhysicsWorld2D)_).SubStepping = v);
        protected static readonly RbfxAttribute<Vector2> GravityAttr = new ("Gravity", VariantType.VarVector2, new Variant(new Vector2(0f, -9.81f)), _=>((PhysicsWorld2D)_).Gravity, (_,v)=>((PhysicsWorld2D)_).Gravity = v);
        protected static readonly RbfxAttribute<bool> AutoClearForcesAttr = new ("Auto Clear Forces", VariantType.VarBool, new Variant(false), _=>((PhysicsWorld2D)_).AutoClearForces, (_,v)=>((PhysicsWorld2D)_).AutoClearForces = v);
        protected static readonly RbfxAttribute<int> VelocityIterationsAttr = new ("Velocity Iterations", VariantType.VarInt, new Variant(8), _=>((PhysicsWorld2D)_).VelocityIterations, (_,v)=>((PhysicsWorld2D)_).VelocityIterations = v);
        protected static readonly RbfxAttribute<int> PositionIterationsAttr = new ("Position Iterations", VariantType.VarInt, new Variant(3), _=>((PhysicsWorld2D)_).PositionIterations, (_,v)=>((PhysicsWorld2D)_).PositionIterations = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return DrawShapeAttr;
            yield return DrawJointAttr;
            yield return DrawAabbAttr;
            yield return DrawPairAttr;
            yield return DrawCenterOfMassAttr;
            yield return AllowSleepingAttr;
            yield return WarmStartingAttr;
            yield return ContinuousPhysicsAttr;
            yield return SubSteppingAttr;
            yield return GravityAttr;
            yield return AutoClearForcesAttr;
            yield return VelocityIterationsAttr;
            yield return PositionIterationsAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _drawShape = false;

        protected bool _drawJoint = false;

        protected bool _drawAabb = false;

        protected bool _drawPair = false;

        protected bool _drawCenterOfMass = false;

        protected bool _allowSleeping = false;

        protected bool _warmStarting = false;

        protected bool _continuousPhysics = true;

        protected bool _subStepping = false;

        protected Vector2 _gravity = new Vector2(0f, -9.81f);

        protected bool _autoClearForces = false;

        protected int _velocityIterations = 8;

        protected int _positionIterations = 3;

        public bool DrawShape
        {
            get => _drawShape;
            set => _drawShape = value;
        }

        public bool DrawJoint
        {
            get => _drawJoint;
            set => _drawJoint = value;
        }

        public bool DrawAabb
        {
            get => _drawAabb;
            set => _drawAabb = value;
        }

        public bool DrawPair
        {
            get => _drawPair;
            set => _drawPair = value;
        }

        public bool DrawCenterOfMass
        {
            get => _drawCenterOfMass;
            set => _drawCenterOfMass = value;
        }

        public bool AllowSleeping
        {
            get => _allowSleeping;
            set => _allowSleeping = value;
        }

        public bool WarmStarting
        {
            get => _warmStarting;
            set => _warmStarting = value;
        }

        public bool ContinuousPhysics
        {
            get => _continuousPhysics;
            set => _continuousPhysics = value;
        }

        public bool SubStepping
        {
            get => _subStepping;
            set => _subStepping = value;
        }

        public Vector2 Gravity
        {
            get => _gravity;
            set => _gravity = value;
        }

        public bool AutoClearForces
        {
            get => _autoClearForces;
            set => _autoClearForces = value;
        }

        public int VelocityIterations
        {
            get => _velocityIterations;
            set => _velocityIterations = value;
        }

        public int PositionIterations
        {
            get => _positionIterations;
            set => _positionIterations = value;
        }
    }
}

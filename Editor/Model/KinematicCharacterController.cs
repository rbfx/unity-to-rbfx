// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class KinematicCharacterController: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<Vector3> GravityAttr = new ("Gravity", VariantType.VarVector3, new Variant(new Vector3(0f, -14f, 0f)), _=>((KinematicCharacterController)_).Gravity, (_,v)=>((KinematicCharacterController)_).Gravity = v);
        protected static readonly RbfxAttribute<int> CollisionLayerAttr = new ("Collision Layer", VariantType.VarInt, new Variant(1), _=>((KinematicCharacterController)_).CollisionLayer, (_,v)=>((KinematicCharacterController)_).CollisionLayer = v);
        protected static readonly RbfxAttribute<int> CollisionMaskAttr = new ("Collision Mask", VariantType.VarInt, new Variant(65535), _=>((KinematicCharacterController)_).CollisionMask, (_,v)=>((KinematicCharacterController)_).CollisionMask = v);
        protected static readonly RbfxAttribute<float> LinearDampingAttr = new ("Linear Damping", VariantType.VarFloat, new Variant(0.2f), _=>((KinematicCharacterController)_).LinearDamping, (_,v)=>((KinematicCharacterController)_).LinearDamping = v);
        protected static readonly RbfxAttribute<float> AngularDampingAttr = new ("Angular Damping", VariantType.VarFloat, new Variant(0.2f), _=>((KinematicCharacterController)_).AngularDamping, (_,v)=>((KinematicCharacterController)_).AngularDamping = v);
        protected static readonly RbfxAttribute<float> HeightAttr = new ("Height", VariantType.VarFloat, new Variant(1.8f), _=>((KinematicCharacterController)_).Height, (_,v)=>((KinematicCharacterController)_).Height = v);
        protected static readonly RbfxAttribute<float> DiameterAttr = new ("Diameter", VariantType.VarFloat, new Variant(0.7f), _=>((KinematicCharacterController)_).Diameter, (_,v)=>((KinematicCharacterController)_).Diameter = v);
        protected static readonly RbfxAttribute<Vector3> OffsetAttr = new ("Offset", VariantType.VarVector3, new Variant(new Vector3(0f, 0.9f, 0f)), _=>((KinematicCharacterController)_).Offset, (_,v)=>((KinematicCharacterController)_).Offset = v);
        protected static readonly RbfxAttribute<float> StepHeightAttr = new ("Step Height", VariantType.VarFloat, new Variant(0.4f), _=>((KinematicCharacterController)_).StepHeight, (_,v)=>((KinematicCharacterController)_).StepHeight = v);
        protected static readonly RbfxAttribute<float> MaxJumpHeightAttr = new ("Max Jump Height", VariantType.VarFloat, new Variant(2f), _=>((KinematicCharacterController)_).MaxJumpHeight, (_,v)=>((KinematicCharacterController)_).MaxJumpHeight = v);
        protected static readonly RbfxAttribute<float> FallSpeedAttr = new ("Fall Speed", VariantType.VarFloat, new Variant(55f), _=>((KinematicCharacterController)_).FallSpeed, (_,v)=>((KinematicCharacterController)_).FallSpeed = v);
        protected static readonly RbfxAttribute<float> JumpSpeedAttr = new ("Jump Speed", VariantType.VarFloat, new Variant(9f), _=>((KinematicCharacterController)_).JumpSpeed, (_,v)=>((KinematicCharacterController)_).JumpSpeed = v);
        protected static readonly RbfxAttribute<float> MaxSlopeAttr = new ("Max Slope", VariantType.VarFloat, new Variant(45f), _=>((KinematicCharacterController)_).MaxSlope, (_,v)=>((KinematicCharacterController)_).MaxSlope = v);
        protected static readonly RbfxAttribute<bool> IsTriggerAttr = new ("Is Trigger", VariantType.VarBool, new Variant(true), _=>((KinematicCharacterController)_).IsTrigger, (_,v)=>((KinematicCharacterController)_).IsTrigger = v);
        protected static readonly RbfxAttribute<bool> ActivateTriggersAttr = new ("Activate Triggers", VariantType.VarBool, new Variant(true), _=>((KinematicCharacterController)_).ActivateTriggers, (_,v)=>((KinematicCharacterController)_).ActivateTriggers = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return GravityAttr;
            yield return CollisionLayerAttr;
            yield return CollisionMaskAttr;
            yield return LinearDampingAttr;
            yield return AngularDampingAttr;
            yield return HeightAttr;
            yield return DiameterAttr;
            yield return OffsetAttr;
            yield return StepHeightAttr;
            yield return MaxJumpHeightAttr;
            yield return FallSpeedAttr;
            yield return JumpSpeedAttr;
            yield return MaxSlopeAttr;
            yield return IsTriggerAttr;
            yield return ActivateTriggersAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected Vector3 _gravity = new Vector3(0f, -14f, 0f);

        protected int _collisionLayer = 1;

        protected int _collisionMask = 65535;

        protected float _linearDamping = 0.2f;

        protected float _angularDamping = 0.2f;

        protected float _height = 1.8f;

        protected float _diameter = 0.7f;

        protected Vector3 _offset = new Vector3(0f, 0.9f, 0f);

        protected float _stepHeight = 0.4f;

        protected float _maxJumpHeight = 2f;

        protected float _fallSpeed = 55f;

        protected float _jumpSpeed = 9f;

        protected float _maxSlope = 45f;

        protected bool _isTrigger = true;

        protected bool _activateTriggers = true;

        public Vector3 Gravity
        {
            get => _gravity;
            set => _gravity = value;
        }

        public int CollisionLayer
        {
            get => _collisionLayer;
            set => _collisionLayer = value;
        }

        public int CollisionMask
        {
            get => _collisionMask;
            set => _collisionMask = value;
        }

        public float LinearDamping
        {
            get => _linearDamping;
            set => _linearDamping = value;
        }

        public float AngularDamping
        {
            get => _angularDamping;
            set => _angularDamping = value;
        }

        public float Height
        {
            get => _height;
            set => _height = value;
        }

        public float Diameter
        {
            get => _diameter;
            set => _diameter = value;
        }

        public Vector3 Offset
        {
            get => _offset;
            set => _offset = value;
        }

        public float StepHeight
        {
            get => _stepHeight;
            set => _stepHeight = value;
        }

        public float MaxJumpHeight
        {
            get => _maxJumpHeight;
            set => _maxJumpHeight = value;
        }

        public float FallSpeed
        {
            get => _fallSpeed;
            set => _fallSpeed = value;
        }

        public float JumpSpeed
        {
            get => _jumpSpeed;
            set => _jumpSpeed = value;
        }

        public float MaxSlope
        {
            get => _maxSlope;
            set => _maxSlope = value;
        }

        public bool IsTrigger
        {
            get => _isTrigger;
            set => _isTrigger = value;
        }

        public bool ActivateTriggers
        {
            get => _activateTriggers;
            set => _activateTriggers = value;
        }
    }
}

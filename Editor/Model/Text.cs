// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Text: UnityToRebelFork.Editor.UISelectable
    {
        protected static readonly RbfxAttribute<ResourceRef> FontAttr = new ("Font", VariantType.VarResourceRef, new Variant(new ResourceRef("Font", "")), _=>((Text)_).Font, (_,v)=>((Text)_).Font = v);
        protected static readonly RbfxAttribute<float> FontSizeAttr = new ("Font Size", VariantType.VarFloat, new Variant(12f), _=>((Text)_).FontSize, (_,v)=>((Text)_).FontSize = v);
        protected static readonly RbfxAttribute<string> TextValueAttr = new ("Text", VariantType.VarString, new Variant(""), _=>((Text)_).TextValue, (_,v)=>((Text)_).TextValue = v);
        protected static readonly RbfxAttribute<string> TextAlignmentAttr = new ("Text Alignment", VariantType.VarString, new Variant(UnityToRebelFork.Editor.TextAlignment.Left), _=>((Text)_).TextAlignment, (_,v)=>((Text)_).TextAlignment = v);
        protected static readonly RbfxAttribute<float> RowSpacingAttr = new ("Row Spacing", VariantType.VarFloat, new Variant(1f), _=>((Text)_).RowSpacing, (_,v)=>((Text)_).RowSpacing = v);
        protected static readonly RbfxAttribute<bool> WordWrapAttr = new ("Word Wrap", VariantType.VarBool, new Variant(false), _=>((Text)_).WordWrap, (_,v)=>((Text)_).WordWrap = v);
        protected static readonly RbfxAttribute<bool> AutoLocalizableAttr = new ("Auto Localizable", VariantType.VarBool, new Variant(false), _=>((Text)_).AutoLocalizable, (_,v)=>((Text)_).AutoLocalizable = v);
        protected static readonly RbfxAttribute<string> TextEffectAttr = new ("Text Effect", VariantType.VarString, new Variant(UnityToRebelFork.Editor.TextEffect.None), _=>((Text)_).TextEffect, (_,v)=>((Text)_).TextEffect = v);
        protected static readonly RbfxAttribute<IntVector2> ShadowOffsetAttr = new ("Shadow Offset", VariantType.VarIntVector2, new Variant(new IntVector2(1, 1)), _=>((Text)_).ShadowOffset, (_,v)=>((Text)_).ShadowOffset = v);
        protected static readonly RbfxAttribute<int> StrokeThicknessAttr = new ("Stroke Thickness", VariantType.VarInt, new Variant(1), _=>((Text)_).StrokeThickness, (_,v)=>((Text)_).StrokeThickness = v);
        protected static readonly RbfxAttribute<bool> RoundStrokeAttr = new ("Round Stroke", VariantType.VarBool, new Variant(false), _=>((Text)_).RoundStroke, (_,v)=>((Text)_).RoundStroke = v);
        protected static readonly RbfxAttribute<Color> EffectColorAttr = new ("Effect Color", VariantType.VarColor, new Variant(new Color(0f, 0f, 0f, 1f)), _=>((Text)_).EffectColor, (_,v)=>((Text)_).EffectColor = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return FontAttr;
            yield return FontSizeAttr;
            yield return TextValueAttr;
            yield return TextAlignmentAttr;
            yield return RowSpacingAttr;
            yield return WordWrapAttr;
            yield return AutoLocalizableAttr;
            yield return TextEffectAttr;
            yield return ShadowOffsetAttr;
            yield return StrokeThicknessAttr;
            yield return RoundStrokeAttr;
            yield return EffectColorAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected ResourceRef _font = new ResourceRef("Font", "");

        protected float _fontSize = 12f;

        protected string _textValue = "";

        protected string _textAlignment = UnityToRebelFork.Editor.TextAlignment.Left;

        protected float _rowSpacing = 1f;

        protected bool _wordWrap = false;

        protected bool _autoLocalizable = false;

        protected string _textEffect = UnityToRebelFork.Editor.TextEffect.None;

        protected IntVector2 _shadowOffset = new IntVector2(1, 1);

        protected int _strokeThickness = 1;

        protected bool _roundStroke = false;

        protected Color _effectColor = new Color(0f, 0f, 0f, 1f);

        public ResourceRef Font
        {
            get => _font;
            set => _font = value;
        }

        public float FontSize
        {
            get => _fontSize;
            set => _fontSize = value;
        }

        public string TextValue
        {
            get => _textValue;
            set => _textValue = value;
        }

        public string TextAlignment
        {
            get => _textAlignment;
            set => _textAlignment = value;
        }

        public float RowSpacing
        {
            get => _rowSpacing;
            set => _rowSpacing = value;
        }

        public bool WordWrap
        {
            get => _wordWrap;
            set => _wordWrap = value;
        }

        public bool AutoLocalizable
        {
            get => _autoLocalizable;
            set => _autoLocalizable = value;
        }

        public string TextEffect
        {
            get => _textEffect;
            set => _textEffect = value;
        }

        public IntVector2 ShadowOffset
        {
            get => _shadowOffset;
            set => _shadowOffset = value;
        }

        public int StrokeThickness
        {
            get => _strokeThickness;
            set => _strokeThickness = value;
        }

        public bool RoundStroke
        {
            get => _roundStroke;
            set => _roundStroke = value;
        }

        public Color EffectColor
        {
            get => _effectColor;
            set => _effectColor = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Light: UnityToRebelFork.Editor.Drawable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((Light)_).IsEnabled, (_,v)=>((Light)_).IsEnabled = v);
        protected static readonly RbfxAttribute<string> LightTypeAttr = new ("Light Type", VariantType.VarString, new Variant(UnityToRebelFork.Editor.LightType.Point), _=>((Light)_).LightType, (_,v)=>((Light)_).LightType = v);
        protected static readonly RbfxAttribute<string> LightImportanceAttr = new ("Light Importance", VariantType.VarString, new Variant(UnityToRebelFork.Editor.LightImportance.Auto), _=>((Light)_).LightImportance, (_,v)=>((Light)_).LightImportance = v);
        protected static readonly RbfxAttribute<string> LightModeAttr = new ("Light Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.LightMode.Realtime), _=>((Light)_).LightMode, (_,v)=>((Light)_).LightMode = v);
        protected static readonly RbfxAttribute<Color> ColorAttr = new ("Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((Light)_).Color, (_,v)=>((Light)_).Color = v);
        protected static readonly RbfxAttribute<float> SpecularIntensityAttr = new ("Specular Intensity", VariantType.VarFloat, new Variant(1f), _=>((Light)_).SpecularIntensity, (_,v)=>((Light)_).SpecularIntensity = v);
        protected static readonly RbfxAttribute<float> BrightnessMultiplierAttr = new ("Brightness Multiplier", VariantType.VarFloat, new Variant(1f), _=>((Light)_).BrightnessMultiplier, (_,v)=>((Light)_).BrightnessMultiplier = v);
        protected static readonly RbfxAttribute<float> IndirectBrightnessAttr = new ("Indirect Brightness", VariantType.VarFloat, new Variant(1f), _=>((Light)_).IndirectBrightness, (_,v)=>((Light)_).IndirectBrightness = v);
        protected static readonly RbfxAttribute<float> TemperatureAttr = new ("Temperature", VariantType.VarFloat, new Variant(6590f), _=>((Light)_).Temperature, (_,v)=>((Light)_).Temperature = v);
        protected static readonly RbfxAttribute<bool> UsePhysicalValuesAttr = new ("Use Physical Values", VariantType.VarBool, new Variant(false), _=>((Light)_).UsePhysicalValues, (_,v)=>((Light)_).UsePhysicalValues = v);
        protected static readonly RbfxAttribute<float> RadiusAttr = new ("Radius", VariantType.VarFloat, new Variant(0f), _=>((Light)_).Radius, (_,v)=>((Light)_).Radius = v);
        protected static readonly RbfxAttribute<float> LengthAttr = new ("Length", VariantType.VarFloat, new Variant(0f), _=>((Light)_).Length, (_,v)=>((Light)_).Length = v);
        protected static readonly RbfxAttribute<float> RangeAttr = new ("Range", VariantType.VarFloat, new Variant(10f), _=>((Light)_).Range, (_,v)=>((Light)_).Range = v);
        protected static readonly RbfxAttribute<float> SpotFOVAttr = new ("Spot FOV", VariantType.VarFloat, new Variant(30f), _=>((Light)_).SpotFOV, (_,v)=>((Light)_).SpotFOV = v);
        protected static readonly RbfxAttribute<float> SpotAspectRatioAttr = new ("Spot Aspect Ratio", VariantType.VarFloat, new Variant(1f), _=>((Light)_).SpotAspectRatio, (_,v)=>((Light)_).SpotAspectRatio = v);
        protected static readonly RbfxAttribute<ResourceRef> AttenuationTextureAttr = new ("Attenuation Texture", VariantType.VarResourceRef, new Variant(new ResourceRef("Texture2D", "")), _=>((Light)_).AttenuationTexture, (_,v)=>((Light)_).AttenuationTexture = v);
        protected static readonly RbfxAttribute<ResourceRef> LightShapeTextureAttr = new ("Light Shape Texture", VariantType.VarResourceRef, new Variant(new ResourceRef("Texture", "")), _=>((Light)_).LightShapeTexture, (_,v)=>((Light)_).LightShapeTexture = v);
        protected static readonly RbfxAttribute<bool> CanBeOccludedAttr = new ("Can Be Occluded", VariantType.VarBool, new Variant(true), _=>((Light)_).CanBeOccluded, (_,v)=>((Light)_).CanBeOccluded = v);
        protected static readonly RbfxAttribute<bool> CastShadowsAttr = new ("Cast Shadows", VariantType.VarBool, new Variant(false), _=>((Light)_).CastShadows, (_,v)=>((Light)_).CastShadows = v);
        protected static readonly RbfxAttribute<float> DrawDistanceAttr = new ("Draw Distance", VariantType.VarFloat, new Variant(0f), _=>((Light)_).DrawDistance, (_,v)=>((Light)_).DrawDistance = v);
        protected static readonly RbfxAttribute<float> FadeDistanceAttr = new ("Fade Distance", VariantType.VarFloat, new Variant(0f), _=>((Light)_).FadeDistance, (_,v)=>((Light)_).FadeDistance = v);
        protected static readonly RbfxAttribute<float> ShadowDistanceAttr = new ("Shadow Distance", VariantType.VarFloat, new Variant(0f), _=>((Light)_).ShadowDistance, (_,v)=>((Light)_).ShadowDistance = v);
        protected static readonly RbfxAttribute<float> ShadowFadeDistanceAttr = new ("Shadow Fade Distance", VariantType.VarFloat, new Variant(0f), _=>((Light)_).ShadowFadeDistance, (_,v)=>((Light)_).ShadowFadeDistance = v);
        protected static readonly RbfxAttribute<float> ShadowIntensityAttr = new ("Shadow Intensity", VariantType.VarFloat, new Variant(0f), _=>((Light)_).ShadowIntensity, (_,v)=>((Light)_).ShadowIntensity = v);
        protected static readonly RbfxAttribute<float> ShadowResolutionAttr = new ("Shadow Resolution", VariantType.VarFloat, new Variant(1f), _=>((Light)_).ShadowResolution, (_,v)=>((Light)_).ShadowResolution = v);
        protected static readonly RbfxAttribute<bool> FocusToSceneAttr = new ("Focus To Scene", VariantType.VarBool, new Variant(true), _=>((Light)_).FocusToScene, (_,v)=>((Light)_).FocusToScene = v);
        protected static readonly RbfxAttribute<bool> NonuniformViewAttr = new ("Non-uniform View", VariantType.VarBool, new Variant(true), _=>((Light)_).NonuniformView, (_,v)=>((Light)_).NonuniformView = v);
        protected static readonly RbfxAttribute<bool> AutoReduceSizeAttr = new ("Auto-Reduce Size", VariantType.VarBool, new Variant(true), _=>((Light)_).AutoReduceSize, (_,v)=>((Light)_).AutoReduceSize = v);
        protected static readonly RbfxAttribute<Vector4> CSMSplitsAttr = new ("CSM Splits", VariantType.VarVector4, new Variant(new Vector4(1000f, 0f, 0f, 0f)), _=>((Light)_).CSMSplits, (_,v)=>((Light)_).CSMSplits = v);
        protected static readonly RbfxAttribute<float> CSMFadeStartAttr = new ("CSM Fade Start", VariantType.VarFloat, new Variant(0.8f), _=>((Light)_).CSMFadeStart, (_,v)=>((Light)_).CSMFadeStart = v);
        protected static readonly RbfxAttribute<float> CSMBiasAutoAdjustAttr = new ("CSM Bias Auto Adjust", VariantType.VarFloat, new Variant(1f), _=>((Light)_).CSMBiasAutoAdjust, (_,v)=>((Light)_).CSMBiasAutoAdjust = v);
        protected static readonly RbfxAttribute<float> ViewSizeQuantizeAttr = new ("View Size Quantize", VariantType.VarFloat, new Variant(0.5f), _=>((Light)_).ViewSizeQuantize, (_,v)=>((Light)_).ViewSizeQuantize = v);
        protected static readonly RbfxAttribute<float> ViewSizeMinimumAttr = new ("View Size Minimum", VariantType.VarFloat, new Variant(3f), _=>((Light)_).ViewSizeMinimum, (_,v)=>((Light)_).ViewSizeMinimum = v);
        protected static readonly RbfxAttribute<float> DepthConstantBiasAttr = new ("Depth Constant Bias", VariantType.VarFloat, new Variant(0.0002f), _=>((Light)_).DepthConstantBias, (_,v)=>((Light)_).DepthConstantBias = v);
        protected static readonly RbfxAttribute<float> DepthSlopeBiasAttr = new ("Depth Slope Bias", VariantType.VarFloat, new Variant(0.5f), _=>((Light)_).DepthSlopeBias, (_,v)=>((Light)_).DepthSlopeBias = v);
        protected static readonly RbfxAttribute<float> NormalOffsetAttr = new ("Normal Offset", VariantType.VarFloat, new Variant(0f), _=>((Light)_).NormalOffset, (_,v)=>((Light)_).NormalOffset = v);
        protected static readonly RbfxAttribute<float> NearFarclipRatioAttr = new ("Near/Farclip Ratio", VariantType.VarFloat, new Variant(0.002f), _=>((Light)_).NearFarclipRatio, (_,v)=>((Light)_).NearFarclipRatio = v);
        protected static readonly RbfxAttribute<float> MaxExtrusionAttr = new ("Max Extrusion", VariantType.VarFloat, new Variant(1000f), _=>((Light)_).MaxExtrusion, (_,v)=>((Light)_).MaxExtrusion = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return LightTypeAttr;
            yield return LightImportanceAttr;
            yield return LightModeAttr;
            yield return ColorAttr;
            yield return SpecularIntensityAttr;
            yield return BrightnessMultiplierAttr;
            yield return IndirectBrightnessAttr;
            yield return TemperatureAttr;
            yield return UsePhysicalValuesAttr;
            yield return RadiusAttr;
            yield return LengthAttr;
            yield return RangeAttr;
            yield return SpotFOVAttr;
            yield return SpotAspectRatioAttr;
            yield return AttenuationTextureAttr;
            yield return LightShapeTextureAttr;
            yield return CanBeOccludedAttr;
            yield return CastShadowsAttr;
            yield return DrawDistanceAttr;
            yield return FadeDistanceAttr;
            yield return ShadowDistanceAttr;
            yield return ShadowFadeDistanceAttr;
            yield return ShadowIntensityAttr;
            yield return ShadowResolutionAttr;
            yield return FocusToSceneAttr;
            yield return NonuniformViewAttr;
            yield return AutoReduceSizeAttr;
            yield return CSMSplitsAttr;
            yield return CSMFadeStartAttr;
            yield return CSMBiasAutoAdjustAttr;
            yield return ViewSizeQuantizeAttr;
            yield return ViewSizeMinimumAttr;
            yield return DepthConstantBiasAttr;
            yield return DepthSlopeBiasAttr;
            yield return NormalOffsetAttr;
            yield return NearFarclipRatioAttr;
            yield return MaxExtrusionAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected string _lightType = UnityToRebelFork.Editor.LightType.Point;

        protected string _lightImportance = UnityToRebelFork.Editor.LightImportance.Auto;

        protected string _lightMode = UnityToRebelFork.Editor.LightMode.Realtime;

        protected Color _color = new Color(1f, 1f, 1f, 1f);

        protected float _specularIntensity = 1f;

        protected float _brightnessMultiplier = 1f;

        protected float _indirectBrightness = 1f;

        protected float _temperature = 6590f;

        protected bool _usePhysicalValues = false;

        protected float _radius = 0f;

        protected float _length = 0f;

        protected float _range = 10f;

        protected float _spotFOV = 30f;

        protected float _spotAspectRatio = 1f;

        protected ResourceRef _attenuationTexture = new ResourceRef("Texture2D", "");

        protected ResourceRef _lightShapeTexture = new ResourceRef("Texture", "");

        protected bool _canBeOccluded = true;

        protected bool _castShadows = false;

        protected float _drawDistance = 0f;

        protected float _fadeDistance = 0f;

        protected float _shadowDistance = 0f;

        protected float _shadowFadeDistance = 0f;

        protected float _shadowIntensity = 0f;

        protected float _shadowResolution = 1f;

        protected bool _focusToScene = true;

        protected bool _nonuniformView = true;

        protected bool _autoReduceSize = true;

        protected Vector4 _cSMSplits = new Vector4(1000f, 0f, 0f, 0f);

        protected float _cSMFadeStart = 0.8f;

        protected float _cSMBiasAutoAdjust = 1f;

        protected float _viewSizeQuantize = 0.5f;

        protected float _viewSizeMinimum = 3f;

        protected float _depthConstantBias = 0.0002f;

        protected float _depthSlopeBias = 0.5f;

        protected float _normalOffset = 0f;

        protected float _nearFarclipRatio = 0.002f;

        protected float _maxExtrusion = 1000f;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public string LightType
        {
            get => _lightType;
            set => _lightType = value;
        }

        public string LightImportance
        {
            get => _lightImportance;
            set => _lightImportance = value;
        }

        public string LightMode
        {
            get => _lightMode;
            set => _lightMode = value;
        }

        public Color Color
        {
            get => _color;
            set => _color = value;
        }

        public float SpecularIntensity
        {
            get => _specularIntensity;
            set => _specularIntensity = value;
        }

        public float BrightnessMultiplier
        {
            get => _brightnessMultiplier;
            set => _brightnessMultiplier = value;
        }

        public float IndirectBrightness
        {
            get => _indirectBrightness;
            set => _indirectBrightness = value;
        }

        public float Temperature
        {
            get => _temperature;
            set => _temperature = value;
        }

        public bool UsePhysicalValues
        {
            get => _usePhysicalValues;
            set => _usePhysicalValues = value;
        }

        public float Radius
        {
            get => _radius;
            set => _radius = value;
        }

        public float Length
        {
            get => _length;
            set => _length = value;
        }

        public float Range
        {
            get => _range;
            set => _range = value;
        }

        public float SpotFOV
        {
            get => _spotFOV;
            set => _spotFOV = value;
        }

        public float SpotAspectRatio
        {
            get => _spotAspectRatio;
            set => _spotAspectRatio = value;
        }

        public ResourceRef AttenuationTexture
        {
            get => _attenuationTexture;
            set => _attenuationTexture = value;
        }

        public ResourceRef LightShapeTexture
        {
            get => _lightShapeTexture;
            set => _lightShapeTexture = value;
        }

        public bool CanBeOccluded
        {
            get => _canBeOccluded;
            set => _canBeOccluded = value;
        }

        public bool CastShadows
        {
            get => _castShadows;
            set => _castShadows = value;
        }

        public float DrawDistance
        {
            get => _drawDistance;
            set => _drawDistance = value;
        }

        public float FadeDistance
        {
            get => _fadeDistance;
            set => _fadeDistance = value;
        }

        public float ShadowDistance
        {
            get => _shadowDistance;
            set => _shadowDistance = value;
        }

        public float ShadowFadeDistance
        {
            get => _shadowFadeDistance;
            set => _shadowFadeDistance = value;
        }

        public float ShadowIntensity
        {
            get => _shadowIntensity;
            set => _shadowIntensity = value;
        }

        public float ShadowResolution
        {
            get => _shadowResolution;
            set => _shadowResolution = value;
        }

        public bool FocusToScene
        {
            get => _focusToScene;
            set => _focusToScene = value;
        }

        public bool NonuniformView
        {
            get => _nonuniformView;
            set => _nonuniformView = value;
        }

        public bool AutoReduceSize
        {
            get => _autoReduceSize;
            set => _autoReduceSize = value;
        }

        public Vector4 CSMSplits
        {
            get => _cSMSplits;
            set => _cSMSplits = value;
        }

        public float CSMFadeStart
        {
            get => _cSMFadeStart;
            set => _cSMFadeStart = value;
        }

        public float CSMBiasAutoAdjust
        {
            get => _cSMBiasAutoAdjust;
            set => _cSMBiasAutoAdjust = value;
        }

        public float ViewSizeQuantize
        {
            get => _viewSizeQuantize;
            set => _viewSizeQuantize = value;
        }

        public float ViewSizeMinimum
        {
            get => _viewSizeMinimum;
            set => _viewSizeMinimum = value;
        }

        public float DepthConstantBias
        {
            get => _depthConstantBias;
            set => _depthConstantBias = value;
        }

        public float DepthSlopeBias
        {
            get => _depthSlopeBias;
            set => _depthSlopeBias = value;
        }

        public float NormalOffset
        {
            get => _normalOffset;
            set => _normalOffset = value;
        }

        public float NearFarclipRatio
        {
            get => _nearFarclipRatio;
            set => _nearFarclipRatio = value;
        }

        public float MaxExtrusion
        {
            get => _maxExtrusion;
            set => _maxExtrusion = value;
        }
    }
}

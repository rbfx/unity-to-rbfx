// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ProgressBar: UnityToRebelFork.Editor.BorderImage
    {
        protected static readonly RbfxAttribute<string> OrientationAttr = new ("Orientation", VariantType.VarString, new Variant(UnityToRebelFork.Editor.Orientation.Horizontal), _=>((ProgressBar)_).Orientation, (_,v)=>((ProgressBar)_).Orientation = v);
        protected static readonly RbfxAttribute<float> RangeAttr = new ("Range", VariantType.VarFloat, new Variant(1f), _=>((ProgressBar)_).Range, (_,v)=>((ProgressBar)_).Range = v);
        protected static readonly RbfxAttribute<float> ValueAttr = new ("Value", VariantType.VarFloat, new Variant(0f), _=>((ProgressBar)_).Value, (_,v)=>((ProgressBar)_).Value = v);
        protected static readonly RbfxAttribute<bool> ShowPercentTextAttr = new ("Show Percent Text", VariantType.VarBool, new Variant(true), _=>((ProgressBar)_).ShowPercentText, (_,v)=>((ProgressBar)_).ShowPercentText = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return OrientationAttr;
            yield return RangeAttr;
            yield return ValueAttr;
            yield return ShowPercentTextAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected string _orientation = UnityToRebelFork.Editor.Orientation.Horizontal;

        protected float _range = 1f;

        protected float _value = 0f;

        protected bool _showPercentText = true;

        public string Orientation
        {
            get => _orientation;
            set => _orientation = value;
        }

        public float Range
        {
            get => _range;
            set => _range = value;
        }

        public float Value
        {
            get => _value;
            set => _value = value;
        }

        public bool ShowPercentText
        {
            get => _showPercentText;
            set => _showPercentText = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ConstraintFriction2D: UnityToRebelFork.Editor.Constraint2D
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((ConstraintFriction2D)_).IsEnabled, (_,v)=>((ConstraintFriction2D)_).IsEnabled = v);
        protected static readonly RbfxAttribute<Vector2> AnchorAttr = new ("Anchor", VariantType.VarVector2, new Variant(new Vector2(0f, 0f)), _=>((ConstraintFriction2D)_).Anchor, (_,v)=>((ConstraintFriction2D)_).Anchor = v);
        protected static readonly RbfxAttribute<float> MaxForceAttr = new ("Max Force", VariantType.VarFloat, new Variant(0f), _=>((ConstraintFriction2D)_).MaxForce, (_,v)=>((ConstraintFriction2D)_).MaxForce = v);
        protected static readonly RbfxAttribute<float> MaxTorqueAttr = new ("Max Torque", VariantType.VarFloat, new Variant(0f), _=>((ConstraintFriction2D)_).MaxTorque, (_,v)=>((ConstraintFriction2D)_).MaxTorque = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return AnchorAttr;
            yield return MaxForceAttr;
            yield return MaxTorqueAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected Vector2 _anchor = new Vector2(0f, 0f);

        protected float _maxForce = 0f;

        protected float _maxTorque = 0f;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public Vector2 Anchor
        {
            get => _anchor;
            set => _anchor = value;
        }

        public float MaxForce
        {
            get => _maxForce;
            set => _maxForce = value;
        }

        public float MaxTorque
        {
            get => _maxTorque;
            set => _maxTorque = value;
        }
    }
}

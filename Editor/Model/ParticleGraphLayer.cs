// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ParticleGraphLayer: UnityToRebelFork.Editor.Serializable
    {
        protected static readonly RbfxAttribute<int> CapacityAttr = new ("Capacity", VariantType.VarInt, new Variant(16), _=>((ParticleGraphLayer)_).Capacity, (_,v)=>((ParticleGraphLayer)_).Capacity = v);
        protected static readonly RbfxAttribute<float> TimeScaleAttr = new ("TimeScale", VariantType.VarFloat, new Variant(1f), _=>((ParticleGraphLayer)_).TimeScale, (_,v)=>((ParticleGraphLayer)_).TimeScale = v);
        protected static readonly RbfxAttribute<float> DurationAttr = new ("Duration", VariantType.VarFloat, new Variant(1f), _=>((ParticleGraphLayer)_).Duration, (_,v)=>((ParticleGraphLayer)_).Duration = v);
        protected static readonly RbfxAttribute<bool> LoopAttr = new ("Loop", VariantType.VarBool, new Variant(false), _=>((ParticleGraphLayer)_).Loop, (_,v)=>((ParticleGraphLayer)_).Loop = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return CapacityAttr;
            yield return TimeScaleAttr;
            yield return DurationAttr;
            yield return LoopAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected int _capacity = 16;

        protected float _timeScale = 1f;

        protected float _duration = 1f;

        protected bool _loop = false;

        public int Capacity
        {
            get => _capacity;
            set => _capacity = value;
        }

        public float TimeScale
        {
            get => _timeScale;
            set => _timeScale = value;
        }

        public float Duration
        {
            get => _duration;
            set => _duration = value;
        }

        public bool Loop
        {
            get => _loop;
            set => _loop = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ScrollView: UnityToRebelFork.Editor.UIElement
    {
        protected static readonly RbfxAttribute<IntVector2> ViewPositionAttr = new ("View Position", VariantType.VarIntVector2, new Variant(new IntVector2(0, 0)), _=>((ScrollView)_).ViewPosition, (_,v)=>((ScrollView)_).ViewPosition = v);
        protected static readonly RbfxAttribute<float> ScrollStepAttr = new ("Scroll Step", VariantType.VarFloat, new Variant(0.1f), _=>((ScrollView)_).ScrollStep, (_,v)=>((ScrollView)_).ScrollStep = v);
        protected static readonly RbfxAttribute<float> PageStepAttr = new ("Page Step", VariantType.VarFloat, new Variant(1f), _=>((ScrollView)_).PageStep, (_,v)=>((ScrollView)_).PageStep = v);
        protected static readonly RbfxAttribute<bool> AutoShowHideScrollbarsAttr = new ("Auto Show/Hide Scrollbars", VariantType.VarBool, new Variant(true), _=>((ScrollView)_).AutoShowHideScrollbars, (_,v)=>((ScrollView)_).AutoShowHideScrollbars = v);
        protected static readonly RbfxAttribute<float> ScrollDecelerationAttr = new ("Scroll Deceleration", VariantType.VarFloat, new Variant(30f), _=>((ScrollView)_).ScrollDeceleration, (_,v)=>((ScrollView)_).ScrollDeceleration = v);
        protected static readonly RbfxAttribute<float> ScrollSnapEpsilonAttr = new ("Scroll Snap Epsilon", VariantType.VarFloat, new Variant(1E-06f), _=>((ScrollView)_).ScrollSnapEpsilon, (_,v)=>((ScrollView)_).ScrollSnapEpsilon = v);
        protected static readonly RbfxAttribute<bool> AutoDisableChildrenAttr = new ("Auto Disable Children", VariantType.VarBool, new Variant(false), _=>((ScrollView)_).AutoDisableChildren, (_,v)=>((ScrollView)_).AutoDisableChildren = v);
        protected static readonly RbfxAttribute<float> AutoDisableThresholdAttr = new ("Auto Disable Threshold", VariantType.VarFloat, new Variant(25f), _=>((ScrollView)_).AutoDisableThreshold, (_,v)=>((ScrollView)_).AutoDisableThreshold = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return ViewPositionAttr;
            yield return ScrollStepAttr;
            yield return PageStepAttr;
            yield return AutoShowHideScrollbarsAttr;
            yield return ScrollDecelerationAttr;
            yield return ScrollSnapEpsilonAttr;
            yield return AutoDisableChildrenAttr;
            yield return AutoDisableThresholdAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected IntVector2 _viewPosition = new IntVector2(0, 0);

        protected float _scrollStep = 0.1f;

        protected float _pageStep = 1f;

        protected bool _autoShowHideScrollbars = true;

        protected float _scrollDeceleration = 30f;

        protected float _scrollSnapEpsilon = 1E-06f;

        protected bool _autoDisableChildren = false;

        protected float _autoDisableThreshold = 25f;

        public IntVector2 ViewPosition
        {
            get => _viewPosition;
            set => _viewPosition = value;
        }

        public float ScrollStep
        {
            get => _scrollStep;
            set => _scrollStep = value;
        }

        public float PageStep
        {
            get => _pageStep;
            set => _pageStep = value;
        }

        public bool AutoShowHideScrollbars
        {
            get => _autoShowHideScrollbars;
            set => _autoShowHideScrollbars = value;
        }

        public float ScrollDeceleration
        {
            get => _scrollDeceleration;
            set => _scrollDeceleration = value;
        }

        public float ScrollSnapEpsilon
        {
            get => _scrollSnapEpsilon;
            set => _scrollSnapEpsilon = value;
        }

        public bool AutoDisableChildren
        {
            get => _autoDisableChildren;
            set => _autoDisableChildren = value;
        }

        public float AutoDisableThreshold
        {
            get => _autoDisableThreshold;
            set => _autoDisableThreshold = value;
        }
    }
}

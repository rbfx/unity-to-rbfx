// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Text3D: UnityToRebelFork.Editor.Drawable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((Text3D)_).IsEnabled, (_,v)=>((Text3D)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> FontAttr = new ("Font", VariantType.VarResourceRef, new Variant(new ResourceRef("Font", "")), _=>((Text3D)_).Font, (_,v)=>((Text3D)_).Font = v);
        protected static readonly RbfxAttribute<ResourceRef> MaterialAttr = new ("Material", VariantType.VarResourceRef, new Variant(new ResourceRef("Material", "")), _=>((Text3D)_).Material, (_,v)=>((Text3D)_).Material = v);
        protected static readonly RbfxAttribute<float> FontSizeAttr = new ("Font Size", VariantType.VarFloat, new Variant(12f), _=>((Text3D)_).FontSize, (_,v)=>((Text3D)_).FontSize = v);
        protected static readonly RbfxAttribute<string> TextAttr = new ("Text", VariantType.VarString, new Variant(""), _=>((Text3D)_).Text, (_,v)=>((Text3D)_).Text = v);
        protected static readonly RbfxAttribute<string> TextAlignmentAttr = new ("Text Alignment", VariantType.VarString, new Variant(UnityToRebelFork.Editor.TextAlignment.Left), _=>((Text3D)_).TextAlignment, (_,v)=>((Text3D)_).TextAlignment = v);
        protected static readonly RbfxAttribute<float> RowSpacingAttr = new ("Row Spacing", VariantType.VarFloat, new Variant(1f), _=>((Text3D)_).RowSpacing, (_,v)=>((Text3D)_).RowSpacing = v);
        protected static readonly RbfxAttribute<bool> WordWrapAttr = new ("Word Wrap", VariantType.VarBool, new Variant(false), _=>((Text3D)_).WordWrap, (_,v)=>((Text3D)_).WordWrap = v);
        protected static readonly RbfxAttribute<bool> CanBeOccludedAttr = new ("Can Be Occluded", VariantType.VarBool, new Variant(true), _=>((Text3D)_).CanBeOccluded, (_,v)=>((Text3D)_).CanBeOccluded = v);
        protected static readonly RbfxAttribute<bool> FixedScreenSizeAttr = new ("Fixed Screen Size", VariantType.VarBool, new Variant(false), _=>((Text3D)_).FixedScreenSize, (_,v)=>((Text3D)_).FixedScreenSize = v);
        protected static readonly RbfxAttribute<bool> SnaptoPixelsAttr = new ("Snap to Pixels", VariantType.VarBool, new Variant(false), _=>((Text3D)_).SnaptoPixels, (_,v)=>((Text3D)_).SnaptoPixels = v);
        protected static readonly RbfxAttribute<string> FaceCameraModeAttr = new ("Face Camera Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.FaceCameraMode.None), _=>((Text3D)_).FaceCameraMode, (_,v)=>((Text3D)_).FaceCameraMode = v);
        protected static readonly RbfxAttribute<float> MinAngleAttr = new ("Min Angle", VariantType.VarFloat, new Variant(0f), _=>((Text3D)_).MinAngle, (_,v)=>((Text3D)_).MinAngle = v);
        protected static readonly RbfxAttribute<float> DrawDistanceAttr = new ("Draw Distance", VariantType.VarFloat, new Variant(0f), _=>((Text3D)_).DrawDistance, (_,v)=>((Text3D)_).DrawDistance = v);
        protected static readonly RbfxAttribute<int> WidthAttr = new ("Width", VariantType.VarInt, new Variant(0), _=>((Text3D)_).Width, (_,v)=>((Text3D)_).Width = v);
        protected static readonly RbfxAttribute<string> HorizAlignmentAttr = new ("Horiz Alignment", VariantType.VarString, new Variant(UnityToRebelFork.Editor.HorizAlignment.Left), _=>((Text3D)_).HorizAlignment, (_,v)=>((Text3D)_).HorizAlignment = v);
        protected static readonly RbfxAttribute<string> VertAlignmentAttr = new ("Vert Alignment", VariantType.VarString, new Variant(UnityToRebelFork.Editor.VertAlignment.Top), _=>((Text3D)_).VertAlignment, (_,v)=>((Text3D)_).VertAlignment = v);
        protected static readonly RbfxAttribute<float> OpacityAttr = new ("Opacity", VariantType.VarFloat, new Variant(1f), _=>((Text3D)_).Opacity, (_,v)=>((Text3D)_).Opacity = v);
        protected static readonly RbfxAttribute<Color> ColorAttr = new ("Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((Text3D)_).Color, (_,v)=>((Text3D)_).Color = v);
        protected static readonly RbfxAttribute<Color> TopLeftColorAttr = new ("Top Left Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((Text3D)_).TopLeftColor, (_,v)=>((Text3D)_).TopLeftColor = v);
        protected static readonly RbfxAttribute<Color> TopRightColorAttr = new ("Top Right Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((Text3D)_).TopRightColor, (_,v)=>((Text3D)_).TopRightColor = v);
        protected static readonly RbfxAttribute<Color> BottomLeftColorAttr = new ("Bottom Left Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((Text3D)_).BottomLeftColor, (_,v)=>((Text3D)_).BottomLeftColor = v);
        protected static readonly RbfxAttribute<Color> BottomRightColorAttr = new ("Bottom Right Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((Text3D)_).BottomRightColor, (_,v)=>((Text3D)_).BottomRightColor = v);
        protected static readonly RbfxAttribute<string> TextEffectAttr = new ("Text Effect", VariantType.VarString, new Variant(UnityToRebelFork.Editor.TextEffect.None), _=>((Text3D)_).TextEffect, (_,v)=>((Text3D)_).TextEffect = v);
        protected static readonly RbfxAttribute<IntVector2> ShadowOffsetAttr = new ("Shadow Offset", VariantType.VarIntVector2, new Variant(new IntVector2(1, 1)), _=>((Text3D)_).ShadowOffset, (_,v)=>((Text3D)_).ShadowOffset = v);
        protected static readonly RbfxAttribute<int> StrokeThicknessAttr = new ("Stroke Thickness", VariantType.VarInt, new Variant(1), _=>((Text3D)_).StrokeThickness, (_,v)=>((Text3D)_).StrokeThickness = v);
        protected static readonly RbfxAttribute<bool> RoundStrokeAttr = new ("Round Stroke", VariantType.VarBool, new Variant(false), _=>((Text3D)_).RoundStroke, (_,v)=>((Text3D)_).RoundStroke = v);
        protected static readonly RbfxAttribute<Color> EffectColorAttr = new ("Effect Color", VariantType.VarColor, new Variant(new Color(0f, 0f, 0f, 1f)), _=>((Text3D)_).EffectColor, (_,v)=>((Text3D)_).EffectColor = v);
        protected static readonly RbfxAttribute<float> EffectDepthBiasAttr = new ("Effect Depth Bias", VariantType.VarFloat, new Variant(0.1f), _=>((Text3D)_).EffectDepthBias, (_,v)=>((Text3D)_).EffectDepthBias = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return FontAttr;
            yield return MaterialAttr;
            yield return FontSizeAttr;
            yield return TextAttr;
            yield return TextAlignmentAttr;
            yield return RowSpacingAttr;
            yield return WordWrapAttr;
            yield return CanBeOccludedAttr;
            yield return FixedScreenSizeAttr;
            yield return SnaptoPixelsAttr;
            yield return FaceCameraModeAttr;
            yield return MinAngleAttr;
            yield return DrawDistanceAttr;
            yield return WidthAttr;
            yield return HorizAlignmentAttr;
            yield return VertAlignmentAttr;
            yield return OpacityAttr;
            yield return ColorAttr;
            yield return TopLeftColorAttr;
            yield return TopRightColorAttr;
            yield return BottomLeftColorAttr;
            yield return BottomRightColorAttr;
            yield return TextEffectAttr;
            yield return ShadowOffsetAttr;
            yield return StrokeThicknessAttr;
            yield return RoundStrokeAttr;
            yield return EffectColorAttr;
            yield return EffectDepthBiasAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _font = new ResourceRef("Font", "");

        protected ResourceRef _material = new ResourceRef("Material", "");

        protected float _fontSize = 12f;

        protected string _text = "";

        protected string _textAlignment = UnityToRebelFork.Editor.TextAlignment.Left;

        protected float _rowSpacing = 1f;

        protected bool _wordWrap = false;

        protected bool _canBeOccluded = true;

        protected bool _fixedScreenSize = false;

        protected bool _snaptoPixels = false;

        protected string _faceCameraMode = UnityToRebelFork.Editor.FaceCameraMode.None;

        protected float _minAngle = 0f;

        protected float _drawDistance = 0f;

        protected int _width = 0;

        protected string _horizAlignment = UnityToRebelFork.Editor.HorizAlignment.Left;

        protected string _vertAlignment = UnityToRebelFork.Editor.VertAlignment.Top;

        protected float _opacity = 1f;

        protected Color _color = new Color(1f, 1f, 1f, 1f);

        protected Color _topLeftColor = new Color(1f, 1f, 1f, 1f);

        protected Color _topRightColor = new Color(1f, 1f, 1f, 1f);

        protected Color _bottomLeftColor = new Color(1f, 1f, 1f, 1f);

        protected Color _bottomRightColor = new Color(1f, 1f, 1f, 1f);

        protected string _textEffect = UnityToRebelFork.Editor.TextEffect.None;

        protected IntVector2 _shadowOffset = new IntVector2(1, 1);

        protected int _strokeThickness = 1;

        protected bool _roundStroke = false;

        protected Color _effectColor = new Color(0f, 0f, 0f, 1f);

        protected float _effectDepthBias = 0.1f;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef Font
        {
            get => _font;
            set => _font = value;
        }

        public ResourceRef Material
        {
            get => _material;
            set => _material = value;
        }

        public float FontSize
        {
            get => _fontSize;
            set => _fontSize = value;
        }

        public string Text
        {
            get => _text;
            set => _text = value;
        }

        public string TextAlignment
        {
            get => _textAlignment;
            set => _textAlignment = value;
        }

        public float RowSpacing
        {
            get => _rowSpacing;
            set => _rowSpacing = value;
        }

        public bool WordWrap
        {
            get => _wordWrap;
            set => _wordWrap = value;
        }

        public bool CanBeOccluded
        {
            get => _canBeOccluded;
            set => _canBeOccluded = value;
        }

        public bool FixedScreenSize
        {
            get => _fixedScreenSize;
            set => _fixedScreenSize = value;
        }

        public bool SnaptoPixels
        {
            get => _snaptoPixels;
            set => _snaptoPixels = value;
        }

        public string FaceCameraMode
        {
            get => _faceCameraMode;
            set => _faceCameraMode = value;
        }

        public float MinAngle
        {
            get => _minAngle;
            set => _minAngle = value;
        }

        public float DrawDistance
        {
            get => _drawDistance;
            set => _drawDistance = value;
        }

        public int Width
        {
            get => _width;
            set => _width = value;
        }

        public string HorizAlignment
        {
            get => _horizAlignment;
            set => _horizAlignment = value;
        }

        public string VertAlignment
        {
            get => _vertAlignment;
            set => _vertAlignment = value;
        }

        public float Opacity
        {
            get => _opacity;
            set => _opacity = value;
        }

        public Color Color
        {
            get => _color;
            set => _color = value;
        }

        public Color TopLeftColor
        {
            get => _topLeftColor;
            set => _topLeftColor = value;
        }

        public Color TopRightColor
        {
            get => _topRightColor;
            set => _topRightColor = value;
        }

        public Color BottomLeftColor
        {
            get => _bottomLeftColor;
            set => _bottomLeftColor = value;
        }

        public Color BottomRightColor
        {
            get => _bottomRightColor;
            set => _bottomRightColor = value;
        }

        public string TextEffect
        {
            get => _textEffect;
            set => _textEffect = value;
        }

        public IntVector2 ShadowOffset
        {
            get => _shadowOffset;
            set => _shadowOffset = value;
        }

        public int StrokeThickness
        {
            get => _strokeThickness;
            set => _strokeThickness = value;
        }

        public bool RoundStroke
        {
            get => _roundStroke;
            set => _roundStroke = value;
        }

        public Color EffectColor
        {
            get => _effectColor;
            set => _effectColor = value;
        }

        public float EffectDepthBias
        {
            get => _effectDepthBias;
            set => _effectDepthBias = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class SoundSource: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((SoundSource)_).IsEnabled, (_,v)=>((SoundSource)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> SoundAttr = new ("Sound", VariantType.VarResourceRef, new Variant(new ResourceRef("Sound", "")), _=>((SoundSource)_).Sound, (_,v)=>((SoundSource)_).Sound = v);
        protected static readonly RbfxAttribute<string> TypeAttr = new ("Type", VariantType.VarString, new Variant("Effect"), _=>((SoundSource)_).Type, (_,v)=>((SoundSource)_).Type = v);
        protected static readonly RbfxAttribute<float> FrequencyAttr = new ("Frequency", VariantType.VarFloat, new Variant(0f), _=>((SoundSource)_).Frequency, (_,v)=>((SoundSource)_).Frequency = v);
        protected static readonly RbfxAttribute<float> GainAttr = new ("Gain", VariantType.VarFloat, new Variant(1f), _=>((SoundSource)_).Gain, (_,v)=>((SoundSource)_).Gain = v);
        protected static readonly RbfxAttribute<float> AttenuationAttr = new ("Attenuation", VariantType.VarFloat, new Variant(1f), _=>((SoundSource)_).Attenuation, (_,v)=>((SoundSource)_).Attenuation = v);
        protected static readonly RbfxAttribute<float> PanningAttr = new ("Panning", VariantType.VarFloat, new Variant(0f), _=>((SoundSource)_).Panning, (_,v)=>((SoundSource)_).Panning = v);
        protected static readonly RbfxAttribute<float> ReachAttr = new ("Reach", VariantType.VarFloat, new Variant(0f), _=>((SoundSource)_).Reach, (_,v)=>((SoundSource)_).Reach = v);
        protected static readonly RbfxAttribute<bool> LowFrequencyEffectAttr = new ("Low Frequency Effect", VariantType.VarBool, new Variant(false), _=>((SoundSource)_).LowFrequencyEffect, (_,v)=>((SoundSource)_).LowFrequencyEffect = v);
        protected static readonly RbfxAttribute<bool> IsPlayingAttr = new ("Is Playing", VariantType.VarBool, new Variant(false), _=>((SoundSource)_).IsPlaying, (_,v)=>((SoundSource)_).IsPlaying = v);
        protected static readonly RbfxAttribute<string> AutoremoveModeAttr = new ("Autoremove Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.AutoremoveMode.Disabled), _=>((SoundSource)_).AutoremoveMode, (_,v)=>((SoundSource)_).AutoremoveMode = v);
        protected static readonly RbfxAttribute<int> PlayPositionAttr = new ("Play Position", VariantType.VarInt, new Variant(0), _=>((SoundSource)_).PlayPosition, (_,v)=>((SoundSource)_).PlayPosition = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return SoundAttr;
            yield return TypeAttr;
            yield return FrequencyAttr;
            yield return GainAttr;
            yield return AttenuationAttr;
            yield return PanningAttr;
            yield return ReachAttr;
            yield return LowFrequencyEffectAttr;
            yield return IsPlayingAttr;
            yield return AutoremoveModeAttr;
            yield return PlayPositionAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _sound = new ResourceRef("Sound", "");

        protected string _type = "Effect";

        protected float _frequency = 0f;

        protected float _gain = 1f;

        protected float _attenuation = 1f;

        protected float _panning = 0f;

        protected float _reach = 0f;

        protected bool _lowFrequencyEffect = false;

        protected bool _isPlaying = false;

        protected string _autoremoveMode = UnityToRebelFork.Editor.AutoremoveMode.Disabled;

        protected int _playPosition = 0;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef Sound
        {
            get => _sound;
            set => _sound = value;
        }

        public string Type
        {
            get => _type;
            set => _type = value;
        }

        public float Frequency
        {
            get => _frequency;
            set => _frequency = value;
        }

        public float Gain
        {
            get => _gain;
            set => _gain = value;
        }

        public float Attenuation
        {
            get => _attenuation;
            set => _attenuation = value;
        }

        public float Panning
        {
            get => _panning;
            set => _panning = value;
        }

        public float Reach
        {
            get => _reach;
            set => _reach = value;
        }

        public bool LowFrequencyEffect
        {
            get => _lowFrequencyEffect;
            set => _lowFrequencyEffect = value;
        }

        public bool IsPlaying
        {
            get => _isPlaying;
            set => _isPlaying = value;
        }

        public string AutoremoveMode
        {
            get => _autoremoveMode;
            set => _autoremoveMode = value;
        }

        public int PlayPosition
        {
            get => _playPosition;
            set => _playPosition = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class StaticSprite2D: UnityToRebelFork.Editor.Drawable2D
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((StaticSprite2D)_).IsEnabled, (_,v)=>((StaticSprite2D)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> SpriteAttr = new ("Sprite", VariantType.VarResourceRef, new Variant(new ResourceRef("Sprite2D", "")), _=>((StaticSprite2D)_).Sprite, (_,v)=>((StaticSprite2D)_).Sprite = v);
        protected static readonly RbfxAttribute<string> BlendModeAttr = new ("Blend Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.BlendMode.alpha), _=>((StaticSprite2D)_).BlendMode, (_,v)=>((StaticSprite2D)_).BlendMode = v);
        protected static readonly RbfxAttribute<bool> FlipXAttr = new ("Flip X", VariantType.VarBool, new Variant(false), _=>((StaticSprite2D)_).FlipX, (_,v)=>((StaticSprite2D)_).FlipX = v);
        protected static readonly RbfxAttribute<bool> FlipYAttr = new ("Flip Y", VariantType.VarBool, new Variant(false), _=>((StaticSprite2D)_).FlipY, (_,v)=>((StaticSprite2D)_).FlipY = v);
        protected static readonly RbfxAttribute<Color> ColorAttr = new ("Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((StaticSprite2D)_).Color, (_,v)=>((StaticSprite2D)_).Color = v);
        protected static readonly RbfxAttribute<ResourceRef> CustommaterialAttr = new ("Custom material", VariantType.VarResourceRef, new Variant(new ResourceRef("Material", "")), _=>((StaticSprite2D)_).Custommaterial, (_,v)=>((StaticSprite2D)_).Custommaterial = v);
        protected static readonly RbfxAttribute<Vector2> HotSpotAttr = new ("Hot Spot", VariantType.VarVector2, new Variant(new Vector2(0.5f, 0.5f)), _=>((StaticSprite2D)_).HotSpot, (_,v)=>((StaticSprite2D)_).HotSpot = v);
        protected static readonly RbfxAttribute<bool> UseHotSpotAttr = new ("Use Hot Spot", VariantType.VarBool, new Variant(false), _=>((StaticSprite2D)_).UseHotSpot, (_,v)=>((StaticSprite2D)_).UseHotSpot = v);
        protected static readonly RbfxAttribute<Rect> DrawRectangleAttr = new ("Draw Rectangle", VariantType.VarRect, new Variant(new Rect(0f, 0f, 0f, 0f)), _=>((StaticSprite2D)_).DrawRectangle, (_,v)=>((StaticSprite2D)_).DrawRectangle = v);
        protected static readonly RbfxAttribute<bool> UseDrawRectangleAttr = new ("Use Draw Rectangle", VariantType.VarBool, new Variant(false), _=>((StaticSprite2D)_).UseDrawRectangle, (_,v)=>((StaticSprite2D)_).UseDrawRectangle = v);
        protected static readonly RbfxAttribute<Rect> TextureRectangleAttr = new ("Texture Rectangle", VariantType.VarRect, new Variant(new Rect(0f, 0f, 0f, 0f)), _=>((StaticSprite2D)_).TextureRectangle, (_,v)=>((StaticSprite2D)_).TextureRectangle = v);
        protected static readonly RbfxAttribute<bool> UseTextureRectangleAttr = new ("Use Texture Rectangle", VariantType.VarBool, new Variant(false), _=>((StaticSprite2D)_).UseTextureRectangle, (_,v)=>((StaticSprite2D)_).UseTextureRectangle = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return SpriteAttr;
            yield return BlendModeAttr;
            yield return FlipXAttr;
            yield return FlipYAttr;
            yield return ColorAttr;
            yield return CustommaterialAttr;
            yield return HotSpotAttr;
            yield return UseHotSpotAttr;
            yield return DrawRectangleAttr;
            yield return UseDrawRectangleAttr;
            yield return TextureRectangleAttr;
            yield return UseTextureRectangleAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _sprite = new ResourceRef("Sprite2D", "");

        protected string _blendMode = UnityToRebelFork.Editor.BlendMode.alpha;

        protected bool _flipX = false;

        protected bool _flipY = false;

        protected Color _color = new Color(1f, 1f, 1f, 1f);

        protected ResourceRef _custommaterial = new ResourceRef("Material", "");

        protected Vector2 _hotSpot = new Vector2(0.5f, 0.5f);

        protected bool _useHotSpot = false;

        protected Rect _drawRectangle = new Rect(0f, 0f, 0f, 0f);

        protected bool _useDrawRectangle = false;

        protected Rect _textureRectangle = new Rect(0f, 0f, 0f, 0f);

        protected bool _useTextureRectangle = false;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef Sprite
        {
            get => _sprite;
            set => _sprite = value;
        }

        public string BlendMode
        {
            get => _blendMode;
            set => _blendMode = value;
        }

        public bool FlipX
        {
            get => _flipX;
            set => _flipX = value;
        }

        public bool FlipY
        {
            get => _flipY;
            set => _flipY = value;
        }

        public Color Color
        {
            get => _color;
            set => _color = value;
        }

        public ResourceRef Custommaterial
        {
            get => _custommaterial;
            set => _custommaterial = value;
        }

        public Vector2 HotSpot
        {
            get => _hotSpot;
            set => _hotSpot = value;
        }

        public bool UseHotSpot
        {
            get => _useHotSpot;
            set => _useHotSpot = value;
        }

        public Rect DrawRectangle
        {
            get => _drawRectangle;
            set => _drawRectangle = value;
        }

        public bool UseDrawRectangle
        {
            get => _useDrawRectangle;
            set => _useDrawRectangle = value;
        }

        public Rect TextureRectangle
        {
            get => _textureRectangle;
            set => _textureRectangle = value;
        }

        public bool UseTextureRectangle
        {
            get => _useTextureRectangle;
            set => _useTextureRectangle = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Node: UnityToRebelFork.Editor.Serializable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((Node)_).IsEnabled, (_,v)=>((Node)_).IsEnabled = v);
        protected static readonly RbfxAttribute<string> NameAttr = new ("Name", VariantType.VarString, new Variant(""), _=>((Node)_).Name, (_,v)=>((Node)_).Name = v);
        protected static readonly RbfxAttribute<IList<string>> TagsAttr = new ("Tags", VariantType.VarStringList, new Variant(new List<string>() {  }), _=>((Node)_).Tags, (_,v)=>((Node)_).Tags = v);
        protected static readonly RbfxAttribute<Vector3> PositionAttr = new ("Position", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((Node)_).Position, (_,v)=>((Node)_).Position = v);
        protected static readonly RbfxAttribute<Quaternion> RotationAttr = new ("Rotation", VariantType.VarQuaternion, new Variant(new Quaternion(0f, 0f, 0f, 1f)), _=>((Node)_).Rotation, (_,v)=>((Node)_).Rotation = v);
        protected static readonly RbfxAttribute<Vector3> ScaleAttr = new ("Scale", VariantType.VarVector3, new Variant(new Vector3(1f, 1f, 1f)), _=>((Node)_).Scale, (_,v)=>((Node)_).Scale = v);
        protected static readonly RbfxAttribute<Dictionary<string,Variant>> VariablesAttr = new ("Variables", VariantType.VarStringvariantmap, new Variant(new Dictionary<string,Variant>() {  }), _=>((Node)_).Variables, (_,v)=>((Node)_).Variables = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return NameAttr;
            yield return TagsAttr;
            yield return PositionAttr;
            yield return RotationAttr;
            yield return ScaleAttr;
            yield return VariablesAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected string _name = "";

        protected IList<string> _tags = new List<string>() {  };

        protected Vector3 _position = new Vector3(0f, 0f, 0f);

        protected Quaternion _rotation = new Quaternion(0f, 0f, 0f, 1f);

        protected Vector3 _scale = new Vector3(1f, 1f, 1f);

        protected Dictionary<string,Variant> _variables = new Dictionary<string,Variant>() {  };

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public string Name
        {
            get => _name;
            set => _name = value;
        }

        public IList<string> Tags
        {
            get => _tags;
            set => _tags = value;
        }

        public Vector3 Position
        {
            get => _position;
            set => _position = value;
        }

        public Quaternion Rotation
        {
            get => _rotation;
            set => _rotation = value;
        }

        public Vector3 Scale
        {
            get => _scale;
            set => _scale = value;
        }

        public Dictionary<string,Variant> Variables
        {
            get => _variables;
            set => _variables = value;
        }
    }
}

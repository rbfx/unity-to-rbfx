// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Constraint: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((Constraint)_).IsEnabled, (_,v)=>((Constraint)_).IsEnabled = v);
        protected static readonly RbfxAttribute<string> ConstraintTypeAttr = new ("Constraint Type", VariantType.VarString, new Variant(UnityToRebelFork.Editor.ConstraintType.Point), _=>((Constraint)_).ConstraintType, (_,v)=>((Constraint)_).ConstraintType = v);
        protected static readonly RbfxAttribute<Vector3> PositionAttr = new ("Position", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((Constraint)_).Position, (_,v)=>((Constraint)_).Position = v);
        protected static readonly RbfxAttribute<Quaternion> RotationAttr = new ("Rotation", VariantType.VarQuaternion, new Variant(new Quaternion(0f, 0f, 0f, 1f)), _=>((Constraint)_).Rotation, (_,v)=>((Constraint)_).Rotation = v);
        protected static readonly RbfxAttribute<Vector3> OtherBodyPositionAttr = new ("Other Body Position", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((Constraint)_).OtherBodyPosition, (_,v)=>((Constraint)_).OtherBodyPosition = v);
        protected static readonly RbfxAttribute<Quaternion> OtherBodyRotationAttr = new ("Other Body Rotation", VariantType.VarQuaternion, new Variant(new Quaternion(0f, 0f, 0f, 1f)), _=>((Constraint)_).OtherBodyRotation, (_,v)=>((Constraint)_).OtherBodyRotation = v);
        protected static readonly RbfxAttribute<int> OtherBodyNodeIDAttr = new ("Other Body NodeID", VariantType.VarInt, new Variant(0), _=>((Constraint)_).OtherBodyNodeID, (_,v)=>((Constraint)_).OtherBodyNodeID = v);
        protected static readonly RbfxAttribute<Vector2> HighLimitAttr = new ("High Limit", VariantType.VarVector2, new Variant(new Vector2(0f, 0f)), _=>((Constraint)_).HighLimit, (_,v)=>((Constraint)_).HighLimit = v);
        protected static readonly RbfxAttribute<Vector2> LowLimitAttr = new ("Low Limit", VariantType.VarVector2, new Variant(new Vector2(0f, 0f)), _=>((Constraint)_).LowLimit, (_,v)=>((Constraint)_).LowLimit = v);
        protected static readonly RbfxAttribute<float> ERPParameterAttr = new ("ERP Parameter", VariantType.VarFloat, new Variant(0f), _=>((Constraint)_).ERPParameter, (_,v)=>((Constraint)_).ERPParameter = v);
        protected static readonly RbfxAttribute<float> CFMParameterAttr = new ("CFM Parameter", VariantType.VarFloat, new Variant(0f), _=>((Constraint)_).CFMParameter, (_,v)=>((Constraint)_).CFMParameter = v);
        protected static readonly RbfxAttribute<bool> DisableCollisionAttr = new ("Disable Collision", VariantType.VarBool, new Variant(false), _=>((Constraint)_).DisableCollision, (_,v)=>((Constraint)_).DisableCollision = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return ConstraintTypeAttr;
            yield return PositionAttr;
            yield return RotationAttr;
            yield return OtherBodyPositionAttr;
            yield return OtherBodyRotationAttr;
            yield return OtherBodyNodeIDAttr;
            yield return HighLimitAttr;
            yield return LowLimitAttr;
            yield return ERPParameterAttr;
            yield return CFMParameterAttr;
            yield return DisableCollisionAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected string _constraintType = UnityToRebelFork.Editor.ConstraintType.Point;

        protected Vector3 _position = new Vector3(0f, 0f, 0f);

        protected Quaternion _rotation = new Quaternion(0f, 0f, 0f, 1f);

        protected Vector3 _otherBodyPosition = new Vector3(0f, 0f, 0f);

        protected Quaternion _otherBodyRotation = new Quaternion(0f, 0f, 0f, 1f);

        protected int _otherBodyNodeID = 0;

        protected Vector2 _highLimit = new Vector2(0f, 0f);

        protected Vector2 _lowLimit = new Vector2(0f, 0f);

        protected float _eRPParameter = 0f;

        protected float _cFMParameter = 0f;

        protected bool _disableCollision = false;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public string ConstraintType
        {
            get => _constraintType;
            set => _constraintType = value;
        }

        public Vector3 Position
        {
            get => _position;
            set => _position = value;
        }

        public Quaternion Rotation
        {
            get => _rotation;
            set => _rotation = value;
        }

        public Vector3 OtherBodyPosition
        {
            get => _otherBodyPosition;
            set => _otherBodyPosition = value;
        }

        public Quaternion OtherBodyRotation
        {
            get => _otherBodyRotation;
            set => _otherBodyRotation = value;
        }

        public int OtherBodyNodeID
        {
            get => _otherBodyNodeID;
            set => _otherBodyNodeID = value;
        }

        public Vector2 HighLimit
        {
            get => _highLimit;
            set => _highLimit = value;
        }

        public Vector2 LowLimit
        {
            get => _lowLimit;
            set => _lowLimit = value;
        }

        public float ERPParameter
        {
            get => _eRPParameter;
            set => _eRPParameter = value;
        }

        public float CFMParameter
        {
            get => _cFMParameter;
            set => _cFMParameter = value;
        }

        public bool DisableCollision
        {
            get => _disableCollision;
            set => _disableCollision = value;
        }
    }
}

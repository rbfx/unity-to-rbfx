// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Terrain: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((Terrain)_).IsEnabled, (_,v)=>((Terrain)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> HeightMapAttr = new ("Height Map", VariantType.VarResourceRef, new Variant(new ResourceRef("Image", "")), _=>((Terrain)_).HeightMap, (_,v)=>((Terrain)_).HeightMap = v);
        protected static readonly RbfxAttribute<ResourceRef> MaterialAttr = new ("Material", VariantType.VarResourceRef, new Variant(new ResourceRef("Material", "")), _=>((Terrain)_).Material, (_,v)=>((Terrain)_).Material = v);
        protected static readonly RbfxAttribute<int> NorthNeighborNodeIDAttr = new ("North Neighbor NodeID", VariantType.VarInt, new Variant(0), _=>((Terrain)_).NorthNeighborNodeID, (_,v)=>((Terrain)_).NorthNeighborNodeID = v);
        protected static readonly RbfxAttribute<int> SouthNeighborNodeIDAttr = new ("South Neighbor NodeID", VariantType.VarInt, new Variant(0), _=>((Terrain)_).SouthNeighborNodeID, (_,v)=>((Terrain)_).SouthNeighborNodeID = v);
        protected static readonly RbfxAttribute<int> WestNeighborNodeIDAttr = new ("West Neighbor NodeID", VariantType.VarInt, new Variant(0), _=>((Terrain)_).WestNeighborNodeID, (_,v)=>((Terrain)_).WestNeighborNodeID = v);
        protected static readonly RbfxAttribute<int> EastNeighborNodeIDAttr = new ("East Neighbor NodeID", VariantType.VarInt, new Variant(0), _=>((Terrain)_).EastNeighborNodeID, (_,v)=>((Terrain)_).EastNeighborNodeID = v);
        protected static readonly RbfxAttribute<Vector3> VertexSpacingAttr = new ("Vertex Spacing", VariantType.VarVector3, new Variant(new Vector3(1f, 0.25f, 1f)), _=>((Terrain)_).VertexSpacing, (_,v)=>((Terrain)_).VertexSpacing = v);
        protected static readonly RbfxAttribute<int> PatchSizeAttr = new ("Patch Size", VariantType.VarInt, new Variant(32), _=>((Terrain)_).PatchSize, (_,v)=>((Terrain)_).PatchSize = v);
        protected static readonly RbfxAttribute<int> MaxLODLevelsAttr = new ("Max LOD Levels", VariantType.VarInt, new Variant(4), _=>((Terrain)_).MaxLODLevels, (_,v)=>((Terrain)_).MaxLODLevels = v);
        protected static readonly RbfxAttribute<bool> SmoothHeightMapAttr = new ("Smooth Height Map", VariantType.VarBool, new Variant(false), _=>((Terrain)_).SmoothHeightMap, (_,v)=>((Terrain)_).SmoothHeightMap = v);
        protected static readonly RbfxAttribute<bool> IsOccluderAttr = new ("Is Occluder", VariantType.VarBool, new Variant(false), _=>((Terrain)_).IsOccluder, (_,v)=>((Terrain)_).IsOccluder = v);
        protected static readonly RbfxAttribute<bool> CanBeOccludedAttr = new ("Can Be Occluded", VariantType.VarBool, new Variant(true), _=>((Terrain)_).CanBeOccluded, (_,v)=>((Terrain)_).CanBeOccluded = v);
        protected static readonly RbfxAttribute<bool> CastShadowsAttr = new ("Cast Shadows", VariantType.VarBool, new Variant(false), _=>((Terrain)_).CastShadows, (_,v)=>((Terrain)_).CastShadows = v);
        protected static readonly RbfxAttribute<float> DrawDistanceAttr = new ("Draw Distance", VariantType.VarFloat, new Variant(0f), _=>((Terrain)_).DrawDistance, (_,v)=>((Terrain)_).DrawDistance = v);
        protected static readonly RbfxAttribute<float> ShadowDistanceAttr = new ("Shadow Distance", VariantType.VarFloat, new Variant(0f), _=>((Terrain)_).ShadowDistance, (_,v)=>((Terrain)_).ShadowDistance = v);
        protected static readonly RbfxAttribute<float> LODBiasAttr = new ("LOD Bias", VariantType.VarFloat, new Variant(1f), _=>((Terrain)_).LODBias, (_,v)=>((Terrain)_).LODBias = v);
        protected static readonly RbfxAttribute<int> MaxLightsAttr = new ("Max Lights", VariantType.VarInt, new Variant(0), _=>((Terrain)_).MaxLights, (_,v)=>((Terrain)_).MaxLights = v);
        protected static readonly RbfxAttribute<int> ViewMaskAttr = new ("View Mask", VariantType.VarInt, new Variant(-1), _=>((Terrain)_).ViewMask, (_,v)=>((Terrain)_).ViewMask = v);
        protected static readonly RbfxAttribute<int> LightMaskAttr = new ("Light Mask", VariantType.VarInt, new Variant(-1), _=>((Terrain)_).LightMask, (_,v)=>((Terrain)_).LightMask = v);
        protected static readonly RbfxAttribute<int> ShadowMaskAttr = new ("Shadow Mask", VariantType.VarInt, new Variant(-1), _=>((Terrain)_).ShadowMask, (_,v)=>((Terrain)_).ShadowMask = v);
        protected static readonly RbfxAttribute<int> ZoneMaskAttr = new ("Zone Mask", VariantType.VarInt, new Variant(-1), _=>((Terrain)_).ZoneMask, (_,v)=>((Terrain)_).ZoneMask = v);
        protected static readonly RbfxAttribute<int> OcclusionLODlevelAttr = new ("Occlusion LOD level", VariantType.VarInt, new Variant(-1), _=>((Terrain)_).OcclusionLODlevel, (_,v)=>((Terrain)_).OcclusionLODlevel = v);
        protected static readonly RbfxAttribute<bool> BakeLightmapAttr = new ("Bake Lightmap", VariantType.VarBool, new Variant(false), _=>((Terrain)_).BakeLightmap, (_,v)=>((Terrain)_).BakeLightmap = v);
        protected static readonly RbfxAttribute<float> ScaleinLightmapAttr = new ("Scale in Lightmap", VariantType.VarFloat, new Variant(1f), _=>((Terrain)_).ScaleinLightmap, (_,v)=>((Terrain)_).ScaleinLightmap = v);
        protected static readonly RbfxAttribute<int> LightmapIndexAttr = new ("Lightmap Index", VariantType.VarInt, new Variant(0), _=>((Terrain)_).LightmapIndex, (_,v)=>((Terrain)_).LightmapIndex = v);
        protected static readonly RbfxAttribute<Vector4> LightmapScaleOffsetAttr = new ("Lightmap Scale & Offset", VariantType.VarVector4, new Variant(new Vector4(1f, 1f, 0f, 0f)), _=>((Terrain)_).LightmapScaleOffset, (_,v)=>((Terrain)_).LightmapScaleOffset = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return HeightMapAttr;
            yield return MaterialAttr;
            yield return NorthNeighborNodeIDAttr;
            yield return SouthNeighborNodeIDAttr;
            yield return WestNeighborNodeIDAttr;
            yield return EastNeighborNodeIDAttr;
            yield return VertexSpacingAttr;
            yield return PatchSizeAttr;
            yield return MaxLODLevelsAttr;
            yield return SmoothHeightMapAttr;
            yield return IsOccluderAttr;
            yield return CanBeOccludedAttr;
            yield return CastShadowsAttr;
            yield return DrawDistanceAttr;
            yield return ShadowDistanceAttr;
            yield return LODBiasAttr;
            yield return MaxLightsAttr;
            yield return ViewMaskAttr;
            yield return LightMaskAttr;
            yield return ShadowMaskAttr;
            yield return ZoneMaskAttr;
            yield return OcclusionLODlevelAttr;
            yield return BakeLightmapAttr;
            yield return ScaleinLightmapAttr;
            yield return LightmapIndexAttr;
            yield return LightmapScaleOffsetAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _heightMap = new ResourceRef("Image", "");

        protected ResourceRef _material = new ResourceRef("Material", "");

        protected int _northNeighborNodeID = 0;

        protected int _southNeighborNodeID = 0;

        protected int _westNeighborNodeID = 0;

        protected int _eastNeighborNodeID = 0;

        protected Vector3 _vertexSpacing = new Vector3(1f, 0.25f, 1f);

        protected int _patchSize = 32;

        protected int _maxLODLevels = 4;

        protected bool _smoothHeightMap = false;

        protected bool _isOccluder = false;

        protected bool _canBeOccluded = true;

        protected bool _castShadows = false;

        protected float _drawDistance = 0f;

        protected float _shadowDistance = 0f;

        protected float _lODBias = 1f;

        protected int _maxLights = 0;

        protected int _viewMask = -1;

        protected int _lightMask = -1;

        protected int _shadowMask = -1;

        protected int _zoneMask = -1;

        protected int _occlusionLODlevel = -1;

        protected bool _bakeLightmap = false;

        protected float _scaleinLightmap = 1f;

        protected int _lightmapIndex = 0;

        protected Vector4 _lightmapScaleOffset = new Vector4(1f, 1f, 0f, 0f);

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef HeightMap
        {
            get => _heightMap;
            set => _heightMap = value;
        }

        public ResourceRef Material
        {
            get => _material;
            set => _material = value;
        }

        public int NorthNeighborNodeID
        {
            get => _northNeighborNodeID;
            set => _northNeighborNodeID = value;
        }

        public int SouthNeighborNodeID
        {
            get => _southNeighborNodeID;
            set => _southNeighborNodeID = value;
        }

        public int WestNeighborNodeID
        {
            get => _westNeighborNodeID;
            set => _westNeighborNodeID = value;
        }

        public int EastNeighborNodeID
        {
            get => _eastNeighborNodeID;
            set => _eastNeighborNodeID = value;
        }

        public Vector3 VertexSpacing
        {
            get => _vertexSpacing;
            set => _vertexSpacing = value;
        }

        public int PatchSize
        {
            get => _patchSize;
            set => _patchSize = value;
        }

        public int MaxLODLevels
        {
            get => _maxLODLevels;
            set => _maxLODLevels = value;
        }

        public bool SmoothHeightMap
        {
            get => _smoothHeightMap;
            set => _smoothHeightMap = value;
        }

        public bool IsOccluder
        {
            get => _isOccluder;
            set => _isOccluder = value;
        }

        public bool CanBeOccluded
        {
            get => _canBeOccluded;
            set => _canBeOccluded = value;
        }

        public bool CastShadows
        {
            get => _castShadows;
            set => _castShadows = value;
        }

        public float DrawDistance
        {
            get => _drawDistance;
            set => _drawDistance = value;
        }

        public float ShadowDistance
        {
            get => _shadowDistance;
            set => _shadowDistance = value;
        }

        public float LODBias
        {
            get => _lODBias;
            set => _lODBias = value;
        }

        public int MaxLights
        {
            get => _maxLights;
            set => _maxLights = value;
        }

        public int ViewMask
        {
            get => _viewMask;
            set => _viewMask = value;
        }

        public int LightMask
        {
            get => _lightMask;
            set => _lightMask = value;
        }

        public int ShadowMask
        {
            get => _shadowMask;
            set => _shadowMask = value;
        }

        public int ZoneMask
        {
            get => _zoneMask;
            set => _zoneMask = value;
        }

        public int OcclusionLODlevel
        {
            get => _occlusionLODlevel;
            set => _occlusionLODlevel = value;
        }

        public bool BakeLightmap
        {
            get => _bakeLightmap;
            set => _bakeLightmap = value;
        }

        public float ScaleinLightmap
        {
            get => _scaleinLightmap;
            set => _scaleinLightmap = value;
        }

        public int LightmapIndex
        {
            get => _lightmapIndex;
            set => _lightmapIndex = value;
        }

        public Vector4 LightmapScaleOffset
        {
            get => _lightmapScaleOffset;
            set => _lightmapScaleOffset = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class OffMeshConnection: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((OffMeshConnection)_).IsEnabled, (_,v)=>((OffMeshConnection)_).IsEnabled = v);
        protected static readonly RbfxAttribute<int> EndpointNodeIDAttr = new ("Endpoint NodeID", VariantType.VarInt, new Variant(0), _=>((OffMeshConnection)_).EndpointNodeID, (_,v)=>((OffMeshConnection)_).EndpointNodeID = v);
        protected static readonly RbfxAttribute<float> RadiusAttr = new ("Radius", VariantType.VarFloat, new Variant(1f), _=>((OffMeshConnection)_).Radius, (_,v)=>((OffMeshConnection)_).Radius = v);
        protected static readonly RbfxAttribute<bool> BidirectionalAttr = new ("Bidirectional", VariantType.VarBool, new Variant(true), _=>((OffMeshConnection)_).Bidirectional, (_,v)=>((OffMeshConnection)_).Bidirectional = v);
        protected static readonly RbfxAttribute<int> FlagsMaskAttr = new ("Flags Mask", VariantType.VarInt, new Variant(1), _=>((OffMeshConnection)_).FlagsMask, (_,v)=>((OffMeshConnection)_).FlagsMask = v);
        protected static readonly RbfxAttribute<int> AreaTypeAttr = new ("Area Type", VariantType.VarInt, new Variant(1), _=>((OffMeshConnection)_).AreaType, (_,v)=>((OffMeshConnection)_).AreaType = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return EndpointNodeIDAttr;
            yield return RadiusAttr;
            yield return BidirectionalAttr;
            yield return FlagsMaskAttr;
            yield return AreaTypeAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected int _endpointNodeID = 0;

        protected float _radius = 1f;

        protected bool _bidirectional = true;

        protected int _flagsMask = 1;

        protected int _areaType = 1;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public int EndpointNodeID
        {
            get => _endpointNodeID;
            set => _endpointNodeID = value;
        }

        public float Radius
        {
            get => _radius;
            set => _radius = value;
        }

        public bool Bidirectional
        {
            get => _bidirectional;
            set => _bidirectional = value;
        }

        public int FlagsMask
        {
            get => _flagsMask;
            set => _flagsMask = value;
        }

        public int AreaType
        {
            get => _areaType;
            set => _areaType = value;
        }
    }
}

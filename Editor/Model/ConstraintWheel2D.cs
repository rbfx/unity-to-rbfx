// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ConstraintWheel2D: UnityToRebelFork.Editor.Constraint2D
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((ConstraintWheel2D)_).IsEnabled, (_,v)=>((ConstraintWheel2D)_).IsEnabled = v);
        protected static readonly RbfxAttribute<Vector2> AnchorAttr = new ("Anchor", VariantType.VarVector2, new Variant(new Vector2(0f, 0f)), _=>((ConstraintWheel2D)_).Anchor, (_,v)=>((ConstraintWheel2D)_).Anchor = v);
        protected static readonly RbfxAttribute<Vector2> AxisAttr = new ("Axis", VariantType.VarVector2, new Variant(new Vector2(1f, 0f)), _=>((ConstraintWheel2D)_).Axis, (_,v)=>((ConstraintWheel2D)_).Axis = v);
        protected static readonly RbfxAttribute<bool> EnableMotorAttr = new ("Enable Motor", VariantType.VarBool, new Variant(false), _=>((ConstraintWheel2D)_).EnableMotor, (_,v)=>((ConstraintWheel2D)_).EnableMotor = v);
        protected static readonly RbfxAttribute<float> MaxMotorTorqueAttr = new ("Max Motor Torque", VariantType.VarFloat, new Variant(0f), _=>((ConstraintWheel2D)_).MaxMotorTorque, (_,v)=>((ConstraintWheel2D)_).MaxMotorTorque = v);
        protected static readonly RbfxAttribute<float> MotorSpeedAttr = new ("Motor Speed", VariantType.VarFloat, new Variant(0f), _=>((ConstraintWheel2D)_).MotorSpeed, (_,v)=>((ConstraintWheel2D)_).MotorSpeed = v);
        protected static readonly RbfxAttribute<float> FrequencyHzAttr = new ("Frequency Hz", VariantType.VarFloat, new Variant(2f), _=>((ConstraintWheel2D)_).FrequencyHz, (_,v)=>((ConstraintWheel2D)_).FrequencyHz = v);
        protected static readonly RbfxAttribute<float> DampingRatioAttr = new ("Damping Ratio", VariantType.VarFloat, new Variant(0.7f), _=>((ConstraintWheel2D)_).DampingRatio, (_,v)=>((ConstraintWheel2D)_).DampingRatio = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return AnchorAttr;
            yield return AxisAttr;
            yield return EnableMotorAttr;
            yield return MaxMotorTorqueAttr;
            yield return MotorSpeedAttr;
            yield return FrequencyHzAttr;
            yield return DampingRatioAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected Vector2 _anchor = new Vector2(0f, 0f);

        protected Vector2 _axis = new Vector2(1f, 0f);

        protected bool _enableMotor = false;

        protected float _maxMotorTorque = 0f;

        protected float _motorSpeed = 0f;

        protected float _frequencyHz = 2f;

        protected float _dampingRatio = 0.7f;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public Vector2 Anchor
        {
            get => _anchor;
            set => _anchor = value;
        }

        public Vector2 Axis
        {
            get => _axis;
            set => _axis = value;
        }

        public bool EnableMotor
        {
            get => _enableMotor;
            set => _enableMotor = value;
        }

        public float MaxMotorTorque
        {
            get => _maxMotorTorque;
            set => _maxMotorTorque = value;
        }

        public float MotorSpeed
        {
            get => _motorSpeed;
            set => _motorSpeed = value;
        }

        public float FrequencyHz
        {
            get => _frequencyHz;
            set => _frequencyHz = value;
        }

        public float DampingRatio
        {
            get => _dampingRatio;
            set => _dampingRatio = value;
        }
    }
}

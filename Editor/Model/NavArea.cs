// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class NavArea: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<Vector3> BoundingBoxMinAttr = new ("Bounding Box Min", VariantType.VarVector3, new Variant(new Vector3(-10f, -10f, -10f)), _=>((NavArea)_).BoundingBoxMin, (_,v)=>((NavArea)_).BoundingBoxMin = v);
        protected static readonly RbfxAttribute<Vector3> BoundingBoxMaxAttr = new ("Bounding Box Max", VariantType.VarVector3, new Variant(new Vector3(10f, 10f, 10f)), _=>((NavArea)_).BoundingBoxMax, (_,v)=>((NavArea)_).BoundingBoxMax = v);
        protected static readonly RbfxAttribute<int> AreaIDAttr = new ("Area ID", VariantType.VarInt, new Variant(0), _=>((NavArea)_).AreaID, (_,v)=>((NavArea)_).AreaID = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return BoundingBoxMinAttr;
            yield return BoundingBoxMaxAttr;
            yield return AreaIDAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected Vector3 _boundingBoxMin = new Vector3(-10f, -10f, -10f);

        protected Vector3 _boundingBoxMax = new Vector3(10f, 10f, 10f);

        protected int _areaID = 0;

        public Vector3 BoundingBoxMin
        {
            get => _boundingBoxMin;
            set => _boundingBoxMin = value;
        }

        public Vector3 BoundingBoxMax
        {
            get => _boundingBoxMax;
            set => _boundingBoxMax = value;
        }

        public int AreaID
        {
            get => _areaID;
            set => _areaID = value;
        }
    }
}

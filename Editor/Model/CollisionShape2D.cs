// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class CollisionShape2D: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<bool> TriggerAttr = new ("Trigger", VariantType.VarBool, new Variant(false), _=>((CollisionShape2D)_).Trigger, (_,v)=>((CollisionShape2D)_).Trigger = v);
        protected static readonly RbfxAttribute<int> CategoryBitsAttr = new ("Category Bits", VariantType.VarInt, new Variant(0), _=>((CollisionShape2D)_).CategoryBits, (_,v)=>((CollisionShape2D)_).CategoryBits = v);
        protected static readonly RbfxAttribute<int> MaskBitsAttr = new ("Mask Bits", VariantType.VarInt, new Variant(0), _=>((CollisionShape2D)_).MaskBits, (_,v)=>((CollisionShape2D)_).MaskBits = v);
        protected static readonly RbfxAttribute<int> GroupIndexAttr = new ("Group Index", VariantType.VarInt, new Variant(0), _=>((CollisionShape2D)_).GroupIndex, (_,v)=>((CollisionShape2D)_).GroupIndex = v);
        protected static readonly RbfxAttribute<float> DensityAttr = new ("Density", VariantType.VarFloat, new Variant(0f), _=>((CollisionShape2D)_).Density, (_,v)=>((CollisionShape2D)_).Density = v);
        protected static readonly RbfxAttribute<float> FrictionAttr = new ("Friction", VariantType.VarFloat, new Variant(0.2f), _=>((CollisionShape2D)_).Friction, (_,v)=>((CollisionShape2D)_).Friction = v);
        protected static readonly RbfxAttribute<float> RestitutionAttr = new ("Restitution", VariantType.VarFloat, new Variant(0f), _=>((CollisionShape2D)_).Restitution, (_,v)=>((CollisionShape2D)_).Restitution = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return TriggerAttr;
            yield return CategoryBitsAttr;
            yield return MaskBitsAttr;
            yield return GroupIndexAttr;
            yield return DensityAttr;
            yield return FrictionAttr;
            yield return RestitutionAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _trigger = false;

        protected int _categoryBits = 0;

        protected int _maskBits = 0;

        protected int _groupIndex = 0;

        protected float _density = 0f;

        protected float _friction = 0.2f;

        protected float _restitution = 0f;

        public bool Trigger
        {
            get => _trigger;
            set => _trigger = value;
        }

        public int CategoryBits
        {
            get => _categoryBits;
            set => _categoryBits = value;
        }

        public int MaskBits
        {
            get => _maskBits;
            set => _maskBits = value;
        }

        public int GroupIndex
        {
            get => _groupIndex;
            set => _groupIndex = value;
        }

        public float Density
        {
            get => _density;
            set => _density = value;
        }

        public float Friction
        {
            get => _friction;
            set => _friction = value;
        }

        public float Restitution
        {
            get => _restitution;
            set => _restitution = value;
        }
    }
}

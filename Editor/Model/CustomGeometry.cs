// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class CustomGeometry: UnityToRebelFork.Editor.Drawable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((CustomGeometry)_).IsEnabled, (_,v)=>((CustomGeometry)_).IsEnabled = v);
        protected static readonly RbfxAttribute<bool> DynamicVertexBufferAttr = new ("Dynamic Vertex Buffer", VariantType.VarBool, new Variant(false), _=>((CustomGeometry)_).DynamicVertexBuffer, (_,v)=>((CustomGeometry)_).DynamicVertexBuffer = v);
        protected static readonly RbfxAttribute<Buffer> GeometryDataAttr = new ("Geometry Data", VariantType.VarBuffer, new Variant(new Buffer()), _=>((CustomGeometry)_).GeometryData, (_,v)=>((CustomGeometry)_).GeometryData = v);
        protected static readonly RbfxAttribute<ResourceRefList> MaterialsAttr = new ("Materials", VariantType.VarResourceRefList, new Variant(new ResourceRefList("Material") { }), _=>((CustomGeometry)_).Materials, (_,v)=>((CustomGeometry)_).Materials = v);
        protected static readonly RbfxAttribute<bool> IsOccluderAttr = new ("Is Occluder", VariantType.VarBool, new Variant(false), _=>((CustomGeometry)_).IsOccluder, (_,v)=>((CustomGeometry)_).IsOccluder = v);
        protected static readonly RbfxAttribute<bool> CanBeOccludedAttr = new ("Can Be Occluded", VariantType.VarBool, new Variant(true), _=>((CustomGeometry)_).CanBeOccluded, (_,v)=>((CustomGeometry)_).CanBeOccluded = v);
        protected static readonly RbfxAttribute<bool> CastShadowsAttr = new ("Cast Shadows", VariantType.VarBool, new Variant(false), _=>((CustomGeometry)_).CastShadows, (_,v)=>((CustomGeometry)_).CastShadows = v);
        protected static readonly RbfxAttribute<float> DrawDistanceAttr = new ("Draw Distance", VariantType.VarFloat, new Variant(0f), _=>((CustomGeometry)_).DrawDistance, (_,v)=>((CustomGeometry)_).DrawDistance = v);
        protected static readonly RbfxAttribute<float> ShadowDistanceAttr = new ("Shadow Distance", VariantType.VarFloat, new Variant(0f), _=>((CustomGeometry)_).ShadowDistance, (_,v)=>((CustomGeometry)_).ShadowDistance = v);
        protected static readonly RbfxAttribute<float> LODBiasAttr = new ("LOD Bias", VariantType.VarFloat, new Variant(1f), _=>((CustomGeometry)_).LODBias, (_,v)=>((CustomGeometry)_).LODBias = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return DynamicVertexBufferAttr;
            yield return GeometryDataAttr;
            yield return MaterialsAttr;
            yield return IsOccluderAttr;
            yield return CanBeOccludedAttr;
            yield return CastShadowsAttr;
            yield return DrawDistanceAttr;
            yield return ShadowDistanceAttr;
            yield return LODBiasAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected bool _dynamicVertexBuffer = false;

        protected Buffer _geometryData = new Buffer();

        protected ResourceRefList _materials = new ResourceRefList("Material") { };

        protected bool _isOccluder = false;

        protected bool _canBeOccluded = true;

        protected bool _castShadows = false;

        protected float _drawDistance = 0f;

        protected float _shadowDistance = 0f;

        protected float _lODBias = 1f;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public bool DynamicVertexBuffer
        {
            get => _dynamicVertexBuffer;
            set => _dynamicVertexBuffer = value;
        }

        public Buffer GeometryData
        {
            get => _geometryData;
            set => _geometryData = value;
        }

        public ResourceRefList Materials
        {
            get => _materials;
            set => _materials = value;
        }

        public bool IsOccluder
        {
            get => _isOccluder;
            set => _isOccluder = value;
        }

        public bool CanBeOccluded
        {
            get => _canBeOccluded;
            set => _canBeOccluded = value;
        }

        public bool CastShadows
        {
            get => _castShadows;
            set => _castShadows = value;
        }

        public float DrawDistance
        {
            get => _drawDistance;
            set => _drawDistance = value;
        }

        public float ShadowDistance
        {
            get => _shadowDistance;
            set => _shadowDistance = value;
        }

        public float LODBias
        {
            get => _lODBias;
            set => _lODBias = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class IKSolver: UnityToRebelFork.Editor.LogicComponent
    {
        protected static readonly RbfxAttribute<bool> SetasoriginAttr = new ("Set as origin", VariantType.VarBool, new Variant(false), _=>((IKSolver)_).Setasorigin, (_,v)=>((IKSolver)_).Setasorigin = v);
        protected static readonly RbfxAttribute<bool> SolvewhenPausedAttr = new ("Solve when Paused", VariantType.VarBool, new Variant(false), _=>((IKSolver)_).SolvewhenPaused, (_,v)=>((IKSolver)_).SolvewhenPaused = v);
        protected static readonly RbfxAttribute<bool> ContinuousRotationAttr = new ("Continuous Rotation", VariantType.VarBool, new Variant(false), _=>((IKSolver)_).ContinuousRotation, (_,v)=>((IKSolver)_).ContinuousRotation = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return SetasoriginAttr;
            yield return SolvewhenPausedAttr;
            yield return ContinuousRotationAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _setasorigin = false;

        protected bool _solvewhenPaused = false;

        protected bool _continuousRotation = false;

        public bool Setasorigin
        {
            get => _setasorigin;
            set => _setasorigin = value;
        }

        public bool SolvewhenPaused
        {
            get => _solvewhenPaused;
            set => _solvewhenPaused = value;
        }

        public bool ContinuousRotation
        {
            get => _continuousRotation;
            set => _continuousRotation = value;
        }
    }
}

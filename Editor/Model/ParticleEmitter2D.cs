// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ParticleEmitter2D: UnityToRebelFork.Editor.Drawable2D
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((ParticleEmitter2D)_).IsEnabled, (_,v)=>((ParticleEmitter2D)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> ParticleEffectAttr = new ("Particle Effect", VariantType.VarResourceRef, new Variant(new ResourceRef("ParticleEffect2D", "")), _=>((ParticleEmitter2D)_).ParticleEffect, (_,v)=>((ParticleEmitter2D)_).ParticleEffect = v);
        protected static readonly RbfxAttribute<ResourceRef> SpriteAttr = new ("Sprite ", VariantType.VarResourceRef, new Variant(new ResourceRef("Sprite2D", "")), _=>((ParticleEmitter2D)_).Sprite, (_,v)=>((ParticleEmitter2D)_).Sprite = v);
        protected static readonly RbfxAttribute<string> BlendModeAttr = new ("Blend Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.BlendMode.alpha), _=>((ParticleEmitter2D)_).BlendMode, (_,v)=>((ParticleEmitter2D)_).BlendMode = v);
        protected static readonly RbfxAttribute<bool> IsEmittingAttr = new ("Is Emitting", VariantType.VarBool, new Variant(true), _=>((ParticleEmitter2D)_).IsEmitting, (_,v)=>((ParticleEmitter2D)_).IsEmitting = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return ParticleEffectAttr;
            yield return SpriteAttr;
            yield return BlendModeAttr;
            yield return IsEmittingAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _particleEffect = new ResourceRef("ParticleEffect2D", "");

        protected ResourceRef _sprite = new ResourceRef("Sprite2D", "");

        protected string _blendMode = UnityToRebelFork.Editor.BlendMode.alpha;

        protected bool _isEmitting = true;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef ParticleEffect
        {
            get => _particleEffect;
            set => _particleEffect = value;
        }

        public ResourceRef Sprite
        {
            get => _sprite;
            set => _sprite = value;
        }

        public string BlendMode
        {
            get => _blendMode;
            set => _blendMode = value;
        }

        public bool IsEmitting
        {
            get => _isEmitting;
            set => _isEmitting = value;
        }
    }
}

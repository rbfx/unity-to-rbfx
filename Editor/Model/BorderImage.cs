// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class BorderImage: UnityToRebelFork.Editor.UIElement
    {
        protected static readonly RbfxAttribute<ResourceRef> TextureAttr = new ("Texture", VariantType.VarResourceRef, new Variant(new ResourceRef("Texture2D", "")), _=>((BorderImage)_).Texture, (_,v)=>((BorderImage)_).Texture = v);
        protected static readonly RbfxAttribute<IntRect> ImageRectAttr = new ("Image Rect", VariantType.VarIntRect, new Variant(new IntRect(0, 0, 0, 0)), _=>((BorderImage)_).ImageRect, (_,v)=>((BorderImage)_).ImageRect = v);
        protected static readonly RbfxAttribute<IntRect> BorderAttr = new ("Border", VariantType.VarIntRect, new Variant(new IntRect(0, 0, 0, 0)), _=>((BorderImage)_).Border, (_,v)=>((BorderImage)_).Border = v);
        protected static readonly RbfxAttribute<IntRect> ImageBorderAttr = new ("Image Border", VariantType.VarIntRect, new Variant(new IntRect(0, 0, 0, 0)), _=>((BorderImage)_).ImageBorder, (_,v)=>((BorderImage)_).ImageBorder = v);
        protected static readonly RbfxAttribute<IntVector2> HoverImageOffsetAttr = new ("Hover Image Offset", VariantType.VarIntVector2, new Variant(new IntVector2(0, 0)), _=>((BorderImage)_).HoverImageOffset, (_,v)=>((BorderImage)_).HoverImageOffset = v);
        protected static readonly RbfxAttribute<IntVector2> DisabledImageOffsetAttr = new ("Disabled Image Offset", VariantType.VarIntVector2, new Variant(new IntVector2(0, 0)), _=>((BorderImage)_).DisabledImageOffset, (_,v)=>((BorderImage)_).DisabledImageOffset = v);
        protected static readonly RbfxAttribute<bool> TiledAttr = new ("Tiled", VariantType.VarBool, new Variant(false), _=>((BorderImage)_).Tiled, (_,v)=>((BorderImage)_).Tiled = v);
        protected static readonly RbfxAttribute<string> BlendModeAttr = new ("Blend Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.BlendMode.replace), _=>((BorderImage)_).BlendMode, (_,v)=>((BorderImage)_).BlendMode = v);
        protected static readonly RbfxAttribute<ResourceRef> MaterialAttr = new ("Material", VariantType.VarResourceRef, new Variant(new ResourceRef("Material", "")), _=>((BorderImage)_).Material, (_,v)=>((BorderImage)_).Material = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return TextureAttr;
            yield return ImageRectAttr;
            yield return BorderAttr;
            yield return ImageBorderAttr;
            yield return HoverImageOffsetAttr;
            yield return DisabledImageOffsetAttr;
            yield return TiledAttr;
            yield return BlendModeAttr;
            yield return MaterialAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected ResourceRef _texture = new ResourceRef("Texture2D", "");

        protected IntRect _imageRect = new IntRect(0, 0, 0, 0);

        protected IntRect _border = new IntRect(0, 0, 0, 0);

        protected IntRect _imageBorder = new IntRect(0, 0, 0, 0);

        protected IntVector2 _hoverImageOffset = new IntVector2(0, 0);

        protected IntVector2 _disabledImageOffset = new IntVector2(0, 0);

        protected bool _tiled = false;

        protected string _blendMode = UnityToRebelFork.Editor.BlendMode.replace;

        protected ResourceRef _material = new ResourceRef("Material", "");

        public ResourceRef Texture
        {
            get => _texture;
            set => _texture = value;
        }

        public IntRect ImageRect
        {
            get => _imageRect;
            set => _imageRect = value;
        }

        public IntRect Border
        {
            get => _border;
            set => _border = value;
        }

        public IntRect ImageBorder
        {
            get => _imageBorder;
            set => _imageBorder = value;
        }

        public IntVector2 HoverImageOffset
        {
            get => _hoverImageOffset;
            set => _hoverImageOffset = value;
        }

        public IntVector2 DisabledImageOffset
        {
            get => _disabledImageOffset;
            set => _disabledImageOffset = value;
        }

        public bool Tiled
        {
            get => _tiled;
            set => _tiled = value;
        }

        public string BlendMode
        {
            get => _blendMode;
            set => _blendMode = value;
        }

        public ResourceRef Material
        {
            get => _material;
            set => _material = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class DecalSet: UnityToRebelFork.Editor.Drawable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((DecalSet)_).IsEnabled, (_,v)=>((DecalSet)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> MaterialAttr = new ("Material", VariantType.VarResourceRef, new Variant(new ResourceRef("Material", "")), _=>((DecalSet)_).Material, (_,v)=>((DecalSet)_).Material = v);
        protected static readonly RbfxAttribute<int> MaxVerticesAttr = new ("Max Vertices", VariantType.VarInt, new Variant(512), _=>((DecalSet)_).MaxVertices, (_,v)=>((DecalSet)_).MaxVertices = v);
        protected static readonly RbfxAttribute<int> MaxIndicesAttr = new ("Max Indices", VariantType.VarInt, new Variant(1024), _=>((DecalSet)_).MaxIndices, (_,v)=>((DecalSet)_).MaxIndices = v);
        protected static readonly RbfxAttribute<bool> OptimizeBufferSizeAttr = new ("Optimize Buffer Size", VariantType.VarBool, new Variant(false), _=>((DecalSet)_).OptimizeBufferSize, (_,v)=>((DecalSet)_).OptimizeBufferSize = v);
        protected static readonly RbfxAttribute<bool> CanBeOccludedAttr = new ("Can Be Occluded", VariantType.VarBool, new Variant(true), _=>((DecalSet)_).CanBeOccluded, (_,v)=>((DecalSet)_).CanBeOccluded = v);
        protected static readonly RbfxAttribute<float> DrawDistanceAttr = new ("Draw Distance", VariantType.VarFloat, new Variant(0f), _=>((DecalSet)_).DrawDistance, (_,v)=>((DecalSet)_).DrawDistance = v);
        protected static readonly RbfxAttribute<Buffer> DecalsAttr = new ("Decals", VariantType.VarBuffer, new Variant(new Buffer()), _=>((DecalSet)_).Decals, (_,v)=>((DecalSet)_).Decals = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return MaterialAttr;
            yield return MaxVerticesAttr;
            yield return MaxIndicesAttr;
            yield return OptimizeBufferSizeAttr;
            yield return CanBeOccludedAttr;
            yield return DrawDistanceAttr;
            yield return DecalsAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _material = new ResourceRef("Material", "");

        protected int _maxVertices = 512;

        protected int _maxIndices = 1024;

        protected bool _optimizeBufferSize = false;

        protected bool _canBeOccluded = true;

        protected float _drawDistance = 0f;

        protected Buffer _decals = new Buffer();

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef Material
        {
            get => _material;
            set => _material = value;
        }

        public int MaxVertices
        {
            get => _maxVertices;
            set => _maxVertices = value;
        }

        public int MaxIndices
        {
            get => _maxIndices;
            set => _maxIndices = value;
        }

        public bool OptimizeBufferSize
        {
            get => _optimizeBufferSize;
            set => _optimizeBufferSize = value;
        }

        public bool CanBeOccluded
        {
            get => _canBeOccluded;
            set => _canBeOccluded = value;
        }

        public float DrawDistance
        {
            get => _drawDistance;
            set => _drawDistance = value;
        }

        public Buffer Decals
        {
            get => _decals;
            set => _decals = value;
        }
    }
}

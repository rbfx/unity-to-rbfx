// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Window: UnityToRebelFork.Editor.BorderImage
    {
        protected static readonly RbfxAttribute<IntRect> ResizeBorderAttr = new ("Resize Border", VariantType.VarIntRect, new Variant(new IntRect(4, 4, 4, 4)), _=>((Window)_).ResizeBorder, (_,v)=>((Window)_).ResizeBorder = v);
        protected static readonly RbfxAttribute<bool> IsMovableAttr = new ("Is Movable", VariantType.VarBool, new Variant(false), _=>((Window)_).IsMovable, (_,v)=>((Window)_).IsMovable = v);
        protected static readonly RbfxAttribute<bool> IsResizableAttr = new ("Is Resizable", VariantType.VarBool, new Variant(false), _=>((Window)_).IsResizable, (_,v)=>((Window)_).IsResizable = v);
        protected static readonly RbfxAttribute<bool> FixedWidthResizingAttr = new ("Fixed Width Resizing", VariantType.VarBool, new Variant(false), _=>((Window)_).FixedWidthResizing, (_,v)=>((Window)_).FixedWidthResizing = v);
        protected static readonly RbfxAttribute<bool> FixedHeightResizingAttr = new ("Fixed Height Resizing", VariantType.VarBool, new Variant(false), _=>((Window)_).FixedHeightResizing, (_,v)=>((Window)_).FixedHeightResizing = v);
        protected static readonly RbfxAttribute<bool> IsModalAttr = new ("Is Modal", VariantType.VarBool, new Variant(false), _=>((Window)_).IsModal, (_,v)=>((Window)_).IsModal = v);
        protected static readonly RbfxAttribute<Color> ModalShadeColorAttr = new ("Modal Shade Color", VariantType.VarColor, new Variant(new Color(0f, 0f, 0f, 0f)), _=>((Window)_).ModalShadeColor, (_,v)=>((Window)_).ModalShadeColor = v);
        protected static readonly RbfxAttribute<Color> ModalFrameColorAttr = new ("Modal Frame Color", VariantType.VarColor, new Variant(new Color(0f, 0f, 0f, 0f)), _=>((Window)_).ModalFrameColor, (_,v)=>((Window)_).ModalFrameColor = v);
        protected static readonly RbfxAttribute<IntVector2> ModalFrameSizeAttr = new ("Modal Frame Size", VariantType.VarIntVector2, new Variant(new IntVector2(0, 0)), _=>((Window)_).ModalFrameSize, (_,v)=>((Window)_).ModalFrameSize = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return ResizeBorderAttr;
            yield return IsMovableAttr;
            yield return IsResizableAttr;
            yield return FixedWidthResizingAttr;
            yield return FixedHeightResizingAttr;
            yield return IsModalAttr;
            yield return ModalShadeColorAttr;
            yield return ModalFrameColorAttr;
            yield return ModalFrameSizeAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected IntRect _resizeBorder = new IntRect(4, 4, 4, 4);

        protected bool _isMovable = false;

        protected bool _isResizable = false;

        protected bool _fixedWidthResizing = false;

        protected bool _fixedHeightResizing = false;

        protected bool _isModal = false;

        protected Color _modalShadeColor = new Color(0f, 0f, 0f, 0f);

        protected Color _modalFrameColor = new Color(0f, 0f, 0f, 0f);

        protected IntVector2 _modalFrameSize = new IntVector2(0, 0);

        public IntRect ResizeBorder
        {
            get => _resizeBorder;
            set => _resizeBorder = value;
        }

        public bool IsMovable
        {
            get => _isMovable;
            set => _isMovable = value;
        }

        public bool IsResizable
        {
            get => _isResizable;
            set => _isResizable = value;
        }

        public bool FixedWidthResizing
        {
            get => _fixedWidthResizing;
            set => _fixedWidthResizing = value;
        }

        public bool FixedHeightResizing
        {
            get => _fixedHeightResizing;
            set => _fixedHeightResizing = value;
        }

        public bool IsModal
        {
            get => _isModal;
            set => _isModal = value;
        }

        public Color ModalShadeColor
        {
            get => _modalShadeColor;
            set => _modalShadeColor = value;
        }

        public Color ModalFrameColor
        {
            get => _modalFrameColor;
            set => _modalFrameColor = value;
        }

        public IntVector2 ModalFrameSize
        {
            get => _modalFrameSize;
            set => _modalFrameSize = value;
        }
    }
}

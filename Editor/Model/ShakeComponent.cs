// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ShakeComponent: UnityToRebelFork.Editor.LogicComponent
    {
        protected static readonly RbfxAttribute<float> TraumaAttr = new ("Trauma", VariantType.VarFloat, new Variant(0f), _=>((ShakeComponent)_).Trauma, (_,v)=>((ShakeComponent)_).Trauma = v);
        protected static readonly RbfxAttribute<float> TraumaPowerAttr = new ("Trauma Power", VariantType.VarFloat, new Variant(2f), _=>((ShakeComponent)_).TraumaPower, (_,v)=>((ShakeComponent)_).TraumaPower = v);
        protected static readonly RbfxAttribute<float> TraumaFalloffAttr = new ("Trauma Falloff", VariantType.VarFloat, new Variant(1f), _=>((ShakeComponent)_).TraumaFalloff, (_,v)=>((ShakeComponent)_).TraumaFalloff = v);
        protected static readonly RbfxAttribute<float> TimeScaleAttr = new ("Time Scale", VariantType.VarFloat, new Variant(16f), _=>((ShakeComponent)_).TimeScale, (_,v)=>((ShakeComponent)_).TimeScale = v);
        protected static readonly RbfxAttribute<Vector3> ShiftRangeAttr = new ("Shift Range", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((ShakeComponent)_).ShiftRange, (_,v)=>((ShakeComponent)_).ShiftRange = v);
        protected static readonly RbfxAttribute<Vector3> RotationRangeAttr = new ("Rotation Range", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((ShakeComponent)_).RotationRange, (_,v)=>((ShakeComponent)_).RotationRange = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return TraumaAttr;
            yield return TraumaPowerAttr;
            yield return TraumaFalloffAttr;
            yield return TimeScaleAttr;
            yield return ShiftRangeAttr;
            yield return RotationRangeAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected float _trauma = 0f;

        protected float _traumaPower = 2f;

        protected float _traumaFalloff = 1f;

        protected float _timeScale = 16f;

        protected Vector3 _shiftRange = new Vector3(0f, 0f, 0f);

        protected Vector3 _rotationRange = new Vector3(0f, 0f, 0f);

        public float Trauma
        {
            get => _trauma;
            set => _trauma = value;
        }

        public float TraumaPower
        {
            get => _traumaPower;
            set => _traumaPower = value;
        }

        public float TraumaFalloff
        {
            get => _traumaFalloff;
            set => _traumaFalloff = value;
        }

        public float TimeScale
        {
            get => _timeScale;
            set => _timeScale = value;
        }

        public Vector3 ShiftRange
        {
            get => _shiftRange;
            set => _shiftRange = value;
        }

        public Vector3 RotationRange
        {
            get => _rotationRange;
            set => _rotationRange = value;
        }
    }
}

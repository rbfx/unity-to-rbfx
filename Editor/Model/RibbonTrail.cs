// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class RibbonTrail: UnityToRebelFork.Editor.Drawable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((RibbonTrail)_).IsEnabled, (_,v)=>((RibbonTrail)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> MaterialAttr = new ("Material", VariantType.VarResourceRef, new Variant(new ResourceRef("Material", "")), _=>((RibbonTrail)_).Material, (_,v)=>((RibbonTrail)_).Material = v);
        protected static readonly RbfxAttribute<bool> EmittingAttr = new ("Emitting", VariantType.VarBool, new Variant(true), _=>((RibbonTrail)_).Emitting, (_,v)=>((RibbonTrail)_).Emitting = v);
        protected static readonly RbfxAttribute<bool> UpdateInvisibleAttr = new ("Update Invisible", VariantType.VarBool, new Variant(false), _=>((RibbonTrail)_).UpdateInvisible, (_,v)=>((RibbonTrail)_).UpdateInvisible = v);
        protected static readonly RbfxAttribute<string> TrailTypeAttr = new ("Trail Type", VariantType.VarString, new Variant(UnityToRebelFork.Editor.TrailType.FaceCamera), _=>((RibbonTrail)_).TrailType, (_,v)=>((RibbonTrail)_).TrailType = v);
        protected static readonly RbfxAttribute<Vector3> BaseVelocityAttr = new ("Base Velocity", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((RibbonTrail)_).BaseVelocity, (_,v)=>((RibbonTrail)_).BaseVelocity = v);
        protected static readonly RbfxAttribute<float> TailLifetimeAttr = new ("Tail Lifetime", VariantType.VarFloat, new Variant(1f), _=>((RibbonTrail)_).TailLifetime, (_,v)=>((RibbonTrail)_).TailLifetime = v);
        protected static readonly RbfxAttribute<int> TailColumnAttr = new ("Tail Column", VariantType.VarInt, new Variant(0), _=>((RibbonTrail)_).TailColumn, (_,v)=>((RibbonTrail)_).TailColumn = v);
        protected static readonly RbfxAttribute<float> VertexDistanceAttr = new ("Vertex Distance", VariantType.VarFloat, new Variant(0.1f), _=>((RibbonTrail)_).VertexDistance, (_,v)=>((RibbonTrail)_).VertexDistance = v);
        protected static readonly RbfxAttribute<float> WidthAttr = new ("Width", VariantType.VarFloat, new Variant(0.2f), _=>((RibbonTrail)_).Width, (_,v)=>((RibbonTrail)_).Width = v);
        protected static readonly RbfxAttribute<float> StartScaleAttr = new ("Start Scale", VariantType.VarFloat, new Variant(1f), _=>((RibbonTrail)_).StartScale, (_,v)=>((RibbonTrail)_).StartScale = v);
        protected static readonly RbfxAttribute<float> EndScaleAttr = new ("End Scale", VariantType.VarFloat, new Variant(1f), _=>((RibbonTrail)_).EndScale, (_,v)=>((RibbonTrail)_).EndScale = v);
        protected static readonly RbfxAttribute<Color> StartColorAttr = new ("Start Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((RibbonTrail)_).StartColor, (_,v)=>((RibbonTrail)_).StartColor = v);
        protected static readonly RbfxAttribute<Color> EndColorAttr = new ("End Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 0f)), _=>((RibbonTrail)_).EndColor, (_,v)=>((RibbonTrail)_).EndColor = v);
        protected static readonly RbfxAttribute<float> AnimationLODBiasAttr = new ("Animation LOD Bias", VariantType.VarFloat, new Variant(1f), _=>((RibbonTrail)_).AnimationLODBias, (_,v)=>((RibbonTrail)_).AnimationLODBias = v);
        protected static readonly RbfxAttribute<bool> SortByDistanceAttr = new ("Sort By Distance", VariantType.VarBool, new Variant(false), _=>((RibbonTrail)_).SortByDistance, (_,v)=>((RibbonTrail)_).SortByDistance = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return MaterialAttr;
            yield return EmittingAttr;
            yield return UpdateInvisibleAttr;
            yield return TrailTypeAttr;
            yield return BaseVelocityAttr;
            yield return TailLifetimeAttr;
            yield return TailColumnAttr;
            yield return VertexDistanceAttr;
            yield return WidthAttr;
            yield return StartScaleAttr;
            yield return EndScaleAttr;
            yield return StartColorAttr;
            yield return EndColorAttr;
            yield return AnimationLODBiasAttr;
            yield return SortByDistanceAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _material = new ResourceRef("Material", "");

        protected bool _emitting = true;

        protected bool _updateInvisible = false;

        protected string _trailType = UnityToRebelFork.Editor.TrailType.FaceCamera;

        protected Vector3 _baseVelocity = new Vector3(0f, 0f, 0f);

        protected float _tailLifetime = 1f;

        protected int _tailColumn = 0;

        protected float _vertexDistance = 0.1f;

        protected float _width = 0.2f;

        protected float _startScale = 1f;

        protected float _endScale = 1f;

        protected Color _startColor = new Color(1f, 1f, 1f, 1f);

        protected Color _endColor = new Color(1f, 1f, 1f, 0f);

        protected float _animationLODBias = 1f;

        protected bool _sortByDistance = false;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef Material
        {
            get => _material;
            set => _material = value;
        }

        public bool Emitting
        {
            get => _emitting;
            set => _emitting = value;
        }

        public bool UpdateInvisible
        {
            get => _updateInvisible;
            set => _updateInvisible = value;
        }

        public string TrailType
        {
            get => _trailType;
            set => _trailType = value;
        }

        public Vector3 BaseVelocity
        {
            get => _baseVelocity;
            set => _baseVelocity = value;
        }

        public float TailLifetime
        {
            get => _tailLifetime;
            set => _tailLifetime = value;
        }

        public int TailColumn
        {
            get => _tailColumn;
            set => _tailColumn = value;
        }

        public float VertexDistance
        {
            get => _vertexDistance;
            set => _vertexDistance = value;
        }

        public float Width
        {
            get => _width;
            set => _width = value;
        }

        public float StartScale
        {
            get => _startScale;
            set => _startScale = value;
        }

        public float EndScale
        {
            get => _endScale;
            set => _endScale = value;
        }

        public Color StartColor
        {
            get => _startColor;
            set => _startColor = value;
        }

        public Color EndColor
        {
            get => _endColor;
            set => _endColor = value;
        }

        public float AnimationLODBias
        {
            get => _animationLODBias;
            set => _animationLODBias = value;
        }

        public bool SortByDistance
        {
            get => _sortByDistance;
            set => _sortByDistance = value;
        }
    }
}

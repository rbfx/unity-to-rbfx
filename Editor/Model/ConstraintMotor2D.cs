// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class ConstraintMotor2D: UnityToRebelFork.Editor.Constraint2D
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((ConstraintMotor2D)_).IsEnabled, (_,v)=>((ConstraintMotor2D)_).IsEnabled = v);
        protected static readonly RbfxAttribute<Vector2> LinearOffsetAttr = new ("Linear Offset", VariantType.VarVector2, new Variant(new Vector2(0f, 0f)), _=>((ConstraintMotor2D)_).LinearOffset, (_,v)=>((ConstraintMotor2D)_).LinearOffset = v);
        protected static readonly RbfxAttribute<float> AngularOffsetAttr = new ("Angular Offset", VariantType.VarFloat, new Variant(0f), _=>((ConstraintMotor2D)_).AngularOffset, (_,v)=>((ConstraintMotor2D)_).AngularOffset = v);
        protected static readonly RbfxAttribute<float> MaxForceAttr = new ("Max Force", VariantType.VarFloat, new Variant(1f), _=>((ConstraintMotor2D)_).MaxForce, (_,v)=>((ConstraintMotor2D)_).MaxForce = v);
        protected static readonly RbfxAttribute<float> MaxTorqueAttr = new ("Max Torque", VariantType.VarFloat, new Variant(1f), _=>((ConstraintMotor2D)_).MaxTorque, (_,v)=>((ConstraintMotor2D)_).MaxTorque = v);
        protected static readonly RbfxAttribute<float> CorrectionFactorAttr = new ("Correction Factor", VariantType.VarFloat, new Variant(0.3f), _=>((ConstraintMotor2D)_).CorrectionFactor, (_,v)=>((ConstraintMotor2D)_).CorrectionFactor = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return LinearOffsetAttr;
            yield return AngularOffsetAttr;
            yield return MaxForceAttr;
            yield return MaxTorqueAttr;
            yield return CorrectionFactorAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected Vector2 _linearOffset = new Vector2(0f, 0f);

        protected float _angularOffset = 0f;

        protected float _maxForce = 1f;

        protected float _maxTorque = 1f;

        protected float _correctionFactor = 0.3f;

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public Vector2 LinearOffset
        {
            get => _linearOffset;
            set => _linearOffset = value;
        }

        public float AngularOffset
        {
            get => _angularOffset;
            set => _angularOffset = value;
        }

        public float MaxForce
        {
            get => _maxForce;
            set => _maxForce = value;
        }

        public float MaxTorque
        {
            get => _maxTorque;
            set => _maxTorque = value;
        }

        public float CorrectionFactor
        {
            get => _correctionFactor;
            set => _correctionFactor = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class OutlineGroup: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<Color> ColorAttr = new ("Color", VariantType.VarColor, new Variant(new Color(1f, 1f, 1f, 1f)), _=>((OutlineGroup)_).Color, (_,v)=>((OutlineGroup)_).Color = v);
        protected static readonly RbfxAttribute<int> RenderOrderAttr = new ("Render Order", VariantType.VarInt, new Variant(128), _=>((OutlineGroup)_).RenderOrder, (_,v)=>((OutlineGroup)_).RenderOrder = v);
        protected static readonly RbfxAttribute<bool> IsDebugAttr = new ("Is Debug", VariantType.VarBool, new Variant(false), _=>((OutlineGroup)_).IsDebug, (_,v)=>((OutlineGroup)_).IsDebug = v);
        protected static readonly RbfxAttribute<VariantList> DrawablesAttr = new ("Drawables", VariantType.VarVariantList, new Variant(new VariantList() {  }), _=>((OutlineGroup)_).Drawables, (_,v)=>((OutlineGroup)_).Drawables = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return ColorAttr;
            yield return RenderOrderAttr;
            yield return IsDebugAttr;
            yield return DrawablesAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected Color _color = new Color(1f, 1f, 1f, 1f);

        protected int _renderOrder = 128;

        protected bool _isDebug = false;

        protected VariantList _drawables = new VariantList() {  };

        public Color Color
        {
            get => _color;
            set => _color = value;
        }

        public int RenderOrder
        {
            get => _renderOrder;
            set => _renderOrder = value;
        }

        public bool IsDebug
        {
            get => _isDebug;
            set => _isDebug = value;
        }

        public VariantList Drawables
        {
            get => _drawables;
            set => _drawables = value;
        }
    }
}

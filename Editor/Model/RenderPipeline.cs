// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class RenderPipeline: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<string> ColorSpaceAttr = new ("Color Space", VariantType.VarString, new Variant(UnityToRebelFork.Editor.ColorSpace.LDRGamma), _=>((RenderPipeline)_).ColorSpace, (_,v)=>((RenderPipeline)_).ColorSpace = v);
        protected static readonly RbfxAttribute<string> MaterialQualityAttr = new ("Material Quality", VariantType.VarString, new Variant(UnityToRebelFork.Editor.MaterialQuality.High), _=>((RenderPipeline)_).MaterialQuality, (_,v)=>((RenderPipeline)_).MaterialQuality = v);
        protected static readonly RbfxAttribute<string> SpecularQualityAttr = new ("Specular Quality", VariantType.VarString, new Variant(UnityToRebelFork.Editor.SpecularQuality.Simple), _=>((RenderPipeline)_).SpecularQuality, (_,v)=>((RenderPipeline)_).SpecularQuality = v);
        protected static readonly RbfxAttribute<string> ReflectionQualityAttr = new ("Reflection Quality", VariantType.VarString, new Variant(UnityToRebelFork.Editor.ReflectionQuality.Pixel), _=>((RenderPipeline)_).ReflectionQuality, (_,v)=>((RenderPipeline)_).ReflectionQuality = v);
        protected static readonly RbfxAttribute<bool> ReadableDepthAttr = new ("Readable Depth", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_).ReadableDepth, (_,v)=>((RenderPipeline)_).ReadableDepth = v);
        protected static readonly RbfxAttribute<int> MaxVertexLightsAttr = new ("Max Vertex Lights", VariantType.VarInt, new Variant(4), _=>((RenderPipeline)_).MaxVertexLights, (_,v)=>((RenderPipeline)_).MaxVertexLights = v);
        protected static readonly RbfxAttribute<int> MaxPixelLightsAttr = new ("Max Pixel Lights", VariantType.VarInt, new Variant(4), _=>((RenderPipeline)_).MaxPixelLights, (_,v)=>((RenderPipeline)_).MaxPixelLights = v);
        protected static readonly RbfxAttribute<string> AmbientModeAttr = new ("Ambient Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.AmbientMode.Directional), _=>((RenderPipeline)_).AmbientMode, (_,v)=>((RenderPipeline)_).AmbientMode = v);
        protected static readonly RbfxAttribute<bool> EnableInstancingAttr = new ("Enable Instancing", VariantType.VarBool, new Variant(true), _=>((RenderPipeline)_).EnableInstancing, (_,v)=>((RenderPipeline)_).EnableInstancing = v);
        protected static readonly RbfxAttribute<bool> DepthPrePassAttr = new ("Depth Pre-Pass", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_).DepthPrePass, (_,v)=>((RenderPipeline)_).DepthPrePass = v);
        protected static readonly RbfxAttribute<string> LightingModeAttr = new ("Lighting Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.LightingMode.Forward), _=>((RenderPipeline)_).LightingMode, (_,v)=>((RenderPipeline)_).LightingMode = v);
        protected static readonly RbfxAttribute<bool> EnableShadowsAttr = new ("Enable Shadows", VariantType.VarBool, new Variant(true), _=>((RenderPipeline)_).EnableShadows, (_,v)=>((RenderPipeline)_).EnableShadows = v);
        protected static readonly RbfxAttribute<bool> CubemapBoxProjectionAttr = new ("Cubemap Box Projection", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_).CubemapBoxProjection, (_,v)=>((RenderPipeline)_).CubemapBoxProjection = v);
        protected static readonly RbfxAttribute<int> PCFKernelSizeAttr = new ("PCF Kernel Size", VariantType.VarInt, new Variant(1), _=>((RenderPipeline)_).PCFKernelSize, (_,v)=>((RenderPipeline)_).PCFKernelSize = v);
        protected static readonly RbfxAttribute<bool> UseVarianceShadowMapsAttr = new ("Use Variance Shadow Maps", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_).UseVarianceShadowMaps, (_,v)=>((RenderPipeline)_).UseVarianceShadowMaps = v);
        protected static readonly RbfxAttribute<Vector2> VSMShadowSettingsAttr = new ("VSM Shadow Settings", VariantType.VarVector2, new Variant(new Vector2(1E-07f, 0.9f)), _=>((RenderPipeline)_).VSMShadowSettings, (_,v)=>((RenderPipeline)_).VSMShadowSettings = v);
        protected static readonly RbfxAttribute<int> VSMMultiSampleAttr = new ("VSM Multi Sample", VariantType.VarInt, new Variant(1), _=>((RenderPipeline)_).VSMMultiSample, (_,v)=>((RenderPipeline)_).VSMMultiSample = v);
        protected static readonly RbfxAttribute<bool> _16bitShadowMapsAttr = new ("16-bit Shadow Maps", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_)._16bitShadowMaps, (_,v)=>((RenderPipeline)_)._16bitShadowMaps = v);
        protected static readonly RbfxAttribute<bool> AutoExposureAttr = new ("Auto Exposure", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_).AutoExposure, (_,v)=>((RenderPipeline)_).AutoExposure = v);
        protected static readonly RbfxAttribute<float> MinExposureAttr = new ("Min Exposure", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).MinExposure, (_,v)=>((RenderPipeline)_).MinExposure = v);
        protected static readonly RbfxAttribute<float> MaxExposureAttr = new ("Max Exposure", VariantType.VarFloat, new Variant(3f), _=>((RenderPipeline)_).MaxExposure, (_,v)=>((RenderPipeline)_).MaxExposure = v);
        protected static readonly RbfxAttribute<float> AdaptRateAttr = new ("Adapt Rate", VariantType.VarFloat, new Variant(0.6f), _=>((RenderPipeline)_).AdaptRate, (_,v)=>((RenderPipeline)_).AdaptRate = v);
        protected static readonly RbfxAttribute<bool> SSAOAttr = new ("SSAO", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_).SSAO, (_,v)=>((RenderPipeline)_).SSAO = v);
        protected static readonly RbfxAttribute<int> SSAODownscaleAttr = new ("SSAO Downscale", VariantType.VarInt, new Variant(0), _=>((RenderPipeline)_).SSAODownscale, (_,v)=>((RenderPipeline)_).SSAODownscale = v);
        protected static readonly RbfxAttribute<float> SSAOStrengthAttr = new ("SSAO Strength", VariantType.VarFloat, new Variant(0.7f), _=>((RenderPipeline)_).SSAOStrength, (_,v)=>((RenderPipeline)_).SSAOStrength = v);
        protected static readonly RbfxAttribute<float> SSAOExponentAttr = new ("SSAO Exponent", VariantType.VarFloat, new Variant(1.5f), _=>((RenderPipeline)_).SSAOExponent, (_,v)=>((RenderPipeline)_).SSAOExponent = v);
        protected static readonly RbfxAttribute<float> SSAONearRadiusAttr = new ("SSAO Near Radius", VariantType.VarFloat, new Variant(0.05f), _=>((RenderPipeline)_).SSAONearRadius, (_,v)=>((RenderPipeline)_).SSAONearRadius = v);
        protected static readonly RbfxAttribute<float> SSAONearDistanceAttr = new ("SSAO Near Distance", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).SSAONearDistance, (_,v)=>((RenderPipeline)_).SSAONearDistance = v);
        protected static readonly RbfxAttribute<float> SSAOFarRadiusAttr = new ("SSAO Far Radius", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).SSAOFarRadius, (_,v)=>((RenderPipeline)_).SSAOFarRadius = v);
        protected static readonly RbfxAttribute<float> SSAOFarDistanceAttr = new ("SSAO Far Distance", VariantType.VarFloat, new Variant(100f), _=>((RenderPipeline)_).SSAOFarDistance, (_,v)=>((RenderPipeline)_).SSAOFarDistance = v);
        protected static readonly RbfxAttribute<float> SSAOBeginFadeDistanceAttr = new ("SSAO Begin Fade Distance", VariantType.VarFloat, new Variant(100f), _=>((RenderPipeline)_).SSAOBeginFadeDistance, (_,v)=>((RenderPipeline)_).SSAOBeginFadeDistance = v);
        protected static readonly RbfxAttribute<float> SSAOEndFadeDistanceAttr = new ("SSAO End Fade Distance", VariantType.VarFloat, new Variant(200f), _=>((RenderPipeline)_).SSAOEndFadeDistance, (_,v)=>((RenderPipeline)_).SSAOEndFadeDistance = v);
        protected static readonly RbfxAttribute<float> SSAODepthThresholdAttr = new ("SSAO Depth Threshold", VariantType.VarFloat, new Variant(0.1f), _=>((RenderPipeline)_).SSAODepthThreshold, (_,v)=>((RenderPipeline)_).SSAODepthThreshold = v);
        protected static readonly RbfxAttribute<float> SSAONormalThresholdAttr = new ("SSAO Normal Threshold", VariantType.VarFloat, new Variant(0.2f), _=>((RenderPipeline)_).SSAONormalThreshold, (_,v)=>((RenderPipeline)_).SSAONormalThreshold = v);
        protected static readonly RbfxAttribute<string> SSAOModeAttr = new ("SSAO Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.SSAOMode.Combine), _=>((RenderPipeline)_).SSAOMode, (_,v)=>((RenderPipeline)_).SSAOMode = v);
        protected static readonly RbfxAttribute<bool> BloomAttr = new ("Bloom", VariantType.VarBool, new Variant(false), _=>((RenderPipeline)_).Bloom, (_,v)=>((RenderPipeline)_).Bloom = v);
        protected static readonly RbfxAttribute<int> BloomIterationsAttr = new ("Bloom Iterations", VariantType.VarInt, new Variant(5), _=>((RenderPipeline)_).BloomIterations, (_,v)=>((RenderPipeline)_).BloomIterations = v);
        protected static readonly RbfxAttribute<float> BloomThresholdAttr = new ("Bloom Threshold", VariantType.VarFloat, new Variant(0.8f), _=>((RenderPipeline)_).BloomThreshold, (_,v)=>((RenderPipeline)_).BloomThreshold = v);
        protected static readonly RbfxAttribute<float> BloomThresholdMaxAttr = new ("Bloom Threshold Max", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).BloomThresholdMax, (_,v)=>((RenderPipeline)_).BloomThresholdMax = v);
        protected static readonly RbfxAttribute<float> BloomIntensityAttr = new ("Bloom Intensity", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).BloomIntensity, (_,v)=>((RenderPipeline)_).BloomIntensity = v);
        protected static readonly RbfxAttribute<float> BloomIterationFactorAttr = new ("Bloom Iteration Factor", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).BloomIterationFactor, (_,v)=>((RenderPipeline)_).BloomIterationFactor = v);
        protected static readonly RbfxAttribute<string> ToneMappingModeAttr = new ("Tone Mapping Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.ToneMappingMode.None), _=>((RenderPipeline)_).ToneMappingMode, (_,v)=>((RenderPipeline)_).ToneMappingMode = v);
        protected static readonly RbfxAttribute<string> PostProcessAntialiasingAttr = new ("Post Process Antialiasing", VariantType.VarString, new Variant(UnityToRebelFork.Editor.PostProcessAntialiasing.None), _=>((RenderPipeline)_).PostProcessAntialiasing, (_,v)=>((RenderPipeline)_).PostProcessAntialiasing = v);
        protected static readonly RbfxAttribute<float> HueShiftAttr = new ("Hue Shift", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).HueShift, (_,v)=>((RenderPipeline)_).HueShift = v);
        protected static readonly RbfxAttribute<float> SaturationAttr = new ("Saturation", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).Saturation, (_,v)=>((RenderPipeline)_).Saturation = v);
        protected static readonly RbfxAttribute<float> BrightnessAttr = new ("Brightness", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).Brightness, (_,v)=>((RenderPipeline)_).Brightness = v);
        protected static readonly RbfxAttribute<float> ContrastAttr = new ("Contrast", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).Contrast, (_,v)=>((RenderPipeline)_).Contrast = v);
        protected static readonly RbfxAttribute<bool> DrawDebugGeometryAttr = new ("Draw Debug Geometry", VariantType.VarBool, new Variant(true), _=>((RenderPipeline)_).DrawDebugGeometry, (_,v)=>((RenderPipeline)_).DrawDebugGeometry = v);
        protected static readonly RbfxAttribute<float> DepthBiasScaleAttr = new ("Depth Bias Scale", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).DepthBiasScale, (_,v)=>((RenderPipeline)_).DepthBiasScale = v);
        protected static readonly RbfxAttribute<float> DepthBiasOffsetAttr = new ("Depth Bias Offset", VariantType.VarFloat, new Variant(0f), _=>((RenderPipeline)_).DepthBiasOffset, (_,v)=>((RenderPipeline)_).DepthBiasOffset = v);
        protected static readonly RbfxAttribute<float> NormalOffsetScaleAttr = new ("Normal Offset Scale", VariantType.VarFloat, new Variant(1f), _=>((RenderPipeline)_).NormalOffsetScale, (_,v)=>((RenderPipeline)_).NormalOffsetScale = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return ColorSpaceAttr;
            yield return MaterialQualityAttr;
            yield return SpecularQualityAttr;
            yield return ReflectionQualityAttr;
            yield return ReadableDepthAttr;
            yield return MaxVertexLightsAttr;
            yield return MaxPixelLightsAttr;
            yield return AmbientModeAttr;
            yield return EnableInstancingAttr;
            yield return DepthPrePassAttr;
            yield return LightingModeAttr;
            yield return EnableShadowsAttr;
            yield return CubemapBoxProjectionAttr;
            yield return PCFKernelSizeAttr;
            yield return UseVarianceShadowMapsAttr;
            yield return VSMShadowSettingsAttr;
            yield return VSMMultiSampleAttr;
            yield return _16bitShadowMapsAttr;
            yield return AutoExposureAttr;
            yield return MinExposureAttr;
            yield return MaxExposureAttr;
            yield return AdaptRateAttr;
            yield return SSAOAttr;
            yield return SSAODownscaleAttr;
            yield return SSAOStrengthAttr;
            yield return SSAOExponentAttr;
            yield return SSAONearRadiusAttr;
            yield return SSAONearDistanceAttr;
            yield return SSAOFarRadiusAttr;
            yield return SSAOFarDistanceAttr;
            yield return SSAOBeginFadeDistanceAttr;
            yield return SSAOEndFadeDistanceAttr;
            yield return SSAODepthThresholdAttr;
            yield return SSAONormalThresholdAttr;
            yield return SSAOModeAttr;
            yield return BloomAttr;
            yield return BloomIterationsAttr;
            yield return BloomThresholdAttr;
            yield return BloomThresholdMaxAttr;
            yield return BloomIntensityAttr;
            yield return BloomIterationFactorAttr;
            yield return ToneMappingModeAttr;
            yield return PostProcessAntialiasingAttr;
            yield return HueShiftAttr;
            yield return SaturationAttr;
            yield return BrightnessAttr;
            yield return ContrastAttr;
            yield return DrawDebugGeometryAttr;
            yield return DepthBiasScaleAttr;
            yield return DepthBiasOffsetAttr;
            yield return NormalOffsetScaleAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected string _colorSpace = UnityToRebelFork.Editor.ColorSpace.LDRGamma;

        protected string _materialQuality = UnityToRebelFork.Editor.MaterialQuality.High;

        protected string _specularQuality = UnityToRebelFork.Editor.SpecularQuality.Simple;

        protected string _reflectionQuality = UnityToRebelFork.Editor.ReflectionQuality.Pixel;

        protected bool _readableDepth = false;

        protected int _maxVertexLights = 4;

        protected int _maxPixelLights = 4;

        protected string _ambientMode = UnityToRebelFork.Editor.AmbientMode.Directional;

        protected bool _enableInstancing = true;

        protected bool _depthPrePass = false;

        protected string _lightingMode = UnityToRebelFork.Editor.LightingMode.Forward;

        protected bool _enableShadows = true;

        protected bool _cubemapBoxProjection = false;

        protected int _pCFKernelSize = 1;

        protected bool _useVarianceShadowMaps = false;

        protected Vector2 _vSMShadowSettings = new Vector2(1E-07f, 0.9f);

        protected int _vSMMultiSample = 1;

        protected bool __16bitShadowMaps = false;

        protected bool _autoExposure = false;

        protected float _minExposure = 1f;

        protected float _maxExposure = 3f;

        protected float _adaptRate = 0.6f;

        protected bool _sSAO = false;

        protected int _sSAODownscale = 0;

        protected float _sSAOStrength = 0.7f;

        protected float _sSAOExponent = 1.5f;

        protected float _sSAONearRadius = 0.05f;

        protected float _sSAONearDistance = 1f;

        protected float _sSAOFarRadius = 1f;

        protected float _sSAOFarDistance = 100f;

        protected float _sSAOBeginFadeDistance = 100f;

        protected float _sSAOEndFadeDistance = 200f;

        protected float _sSAODepthThreshold = 0.1f;

        protected float _sSAONormalThreshold = 0.2f;

        protected string _sSAOMode = UnityToRebelFork.Editor.SSAOMode.Combine;

        protected bool _bloom = false;

        protected int _bloomIterations = 5;

        protected float _bloomThreshold = 0.8f;

        protected float _bloomThresholdMax = 1f;

        protected float _bloomIntensity = 1f;

        protected float _bloomIterationFactor = 1f;

        protected string _toneMappingMode = UnityToRebelFork.Editor.ToneMappingMode.None;

        protected string _postProcessAntialiasing = UnityToRebelFork.Editor.PostProcessAntialiasing.None;

        protected float _hueShift = 1f;

        protected float _saturation = 1f;

        protected float _brightness = 1f;

        protected float _contrast = 1f;

        protected bool _drawDebugGeometry = true;

        protected float _depthBiasScale = 1f;

        protected float _depthBiasOffset = 0f;

        protected float _normalOffsetScale = 1f;

        public string ColorSpace
        {
            get => _colorSpace;
            set => _colorSpace = value;
        }

        public string MaterialQuality
        {
            get => _materialQuality;
            set => _materialQuality = value;
        }

        public string SpecularQuality
        {
            get => _specularQuality;
            set => _specularQuality = value;
        }

        public string ReflectionQuality
        {
            get => _reflectionQuality;
            set => _reflectionQuality = value;
        }

        public bool ReadableDepth
        {
            get => _readableDepth;
            set => _readableDepth = value;
        }

        public int MaxVertexLights
        {
            get => _maxVertexLights;
            set => _maxVertexLights = value;
        }

        public int MaxPixelLights
        {
            get => _maxPixelLights;
            set => _maxPixelLights = value;
        }

        public string AmbientMode
        {
            get => _ambientMode;
            set => _ambientMode = value;
        }

        public bool EnableInstancing
        {
            get => _enableInstancing;
            set => _enableInstancing = value;
        }

        public bool DepthPrePass
        {
            get => _depthPrePass;
            set => _depthPrePass = value;
        }

        public string LightingMode
        {
            get => _lightingMode;
            set => _lightingMode = value;
        }

        public bool EnableShadows
        {
            get => _enableShadows;
            set => _enableShadows = value;
        }

        public bool CubemapBoxProjection
        {
            get => _cubemapBoxProjection;
            set => _cubemapBoxProjection = value;
        }

        public int PCFKernelSize
        {
            get => _pCFKernelSize;
            set => _pCFKernelSize = value;
        }

        public bool UseVarianceShadowMaps
        {
            get => _useVarianceShadowMaps;
            set => _useVarianceShadowMaps = value;
        }

        public Vector2 VSMShadowSettings
        {
            get => _vSMShadowSettings;
            set => _vSMShadowSettings = value;
        }

        public int VSMMultiSample
        {
            get => _vSMMultiSample;
            set => _vSMMultiSample = value;
        }

        public bool _16bitShadowMaps
        {
            get => __16bitShadowMaps;
            set => __16bitShadowMaps = value;
        }

        public bool AutoExposure
        {
            get => _autoExposure;
            set => _autoExposure = value;
        }

        public float MinExposure
        {
            get => _minExposure;
            set => _minExposure = value;
        }

        public float MaxExposure
        {
            get => _maxExposure;
            set => _maxExposure = value;
        }

        public float AdaptRate
        {
            get => _adaptRate;
            set => _adaptRate = value;
        }

        public bool SSAO
        {
            get => _sSAO;
            set => _sSAO = value;
        }

        public int SSAODownscale
        {
            get => _sSAODownscale;
            set => _sSAODownscale = value;
        }

        public float SSAOStrength
        {
            get => _sSAOStrength;
            set => _sSAOStrength = value;
        }

        public float SSAOExponent
        {
            get => _sSAOExponent;
            set => _sSAOExponent = value;
        }

        public float SSAONearRadius
        {
            get => _sSAONearRadius;
            set => _sSAONearRadius = value;
        }

        public float SSAONearDistance
        {
            get => _sSAONearDistance;
            set => _sSAONearDistance = value;
        }

        public float SSAOFarRadius
        {
            get => _sSAOFarRadius;
            set => _sSAOFarRadius = value;
        }

        public float SSAOFarDistance
        {
            get => _sSAOFarDistance;
            set => _sSAOFarDistance = value;
        }

        public float SSAOBeginFadeDistance
        {
            get => _sSAOBeginFadeDistance;
            set => _sSAOBeginFadeDistance = value;
        }

        public float SSAOEndFadeDistance
        {
            get => _sSAOEndFadeDistance;
            set => _sSAOEndFadeDistance = value;
        }

        public float SSAODepthThreshold
        {
            get => _sSAODepthThreshold;
            set => _sSAODepthThreshold = value;
        }

        public float SSAONormalThreshold
        {
            get => _sSAONormalThreshold;
            set => _sSAONormalThreshold = value;
        }

        public string SSAOMode
        {
            get => _sSAOMode;
            set => _sSAOMode = value;
        }

        public bool Bloom
        {
            get => _bloom;
            set => _bloom = value;
        }

        public int BloomIterations
        {
            get => _bloomIterations;
            set => _bloomIterations = value;
        }

        public float BloomThreshold
        {
            get => _bloomThreshold;
            set => _bloomThreshold = value;
        }

        public float BloomThresholdMax
        {
            get => _bloomThresholdMax;
            set => _bloomThresholdMax = value;
        }

        public float BloomIntensity
        {
            get => _bloomIntensity;
            set => _bloomIntensity = value;
        }

        public float BloomIterationFactor
        {
            get => _bloomIterationFactor;
            set => _bloomIterationFactor = value;
        }

        public string ToneMappingMode
        {
            get => _toneMappingMode;
            set => _toneMappingMode = value;
        }

        public string PostProcessAntialiasing
        {
            get => _postProcessAntialiasing;
            set => _postProcessAntialiasing = value;
        }

        public float HueShift
        {
            get => _hueShift;
            set => _hueShift = value;
        }

        public float Saturation
        {
            get => _saturation;
            set => _saturation = value;
        }

        public float Brightness
        {
            get => _brightness;
            set => _brightness = value;
        }

        public float Contrast
        {
            get => _contrast;
            set => _contrast = value;
        }

        public bool DrawDebugGeometry
        {
            get => _drawDebugGeometry;
            set => _drawDebugGeometry = value;
        }

        public float DepthBiasScale
        {
            get => _depthBiasScale;
            set => _depthBiasScale = value;
        }

        public float DepthBiasOffset
        {
            get => _depthBiasOffset;
            set => _depthBiasOffset = value;
        }

        public float NormalOffsetScale
        {
            get => _normalOffsetScale;
            set => _normalOffsetScale = value;
        }
    }
}

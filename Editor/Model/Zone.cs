// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class Zone: UnityToRebelFork.Editor.Drawable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((Zone)_).IsEnabled, (_,v)=>((Zone)_).IsEnabled = v);
        protected static readonly RbfxAttribute<Vector3> BoundingBoxMinAttr = new ("Bounding Box Min", VariantType.VarVector3, new Variant(new Vector3(-10f, -10f, -10f)), _=>((Zone)_).BoundingBoxMin, (_,v)=>((Zone)_).BoundingBoxMin = v);
        protected static readonly RbfxAttribute<Vector3> BoundingBoxMaxAttr = new ("Bounding Box Max", VariantType.VarVector3, new Variant(new Vector3(10f, 10f, 10f)), _=>((Zone)_).BoundingBoxMax, (_,v)=>((Zone)_).BoundingBoxMax = v);
        protected static readonly RbfxAttribute<Color> AmbientColorAttr = new ("Ambient Color", VariantType.VarColor, new Variant(new Color(0.1f, 0.1f, 0.1f, 1f)), _=>((Zone)_).AmbientColor, (_,v)=>((Zone)_).AmbientColor = v);
        protected static readonly RbfxAttribute<float> AmbientBrightnessAttr = new ("Ambient Brightness", VariantType.VarFloat, new Variant(1f), _=>((Zone)_).AmbientBrightness, (_,v)=>((Zone)_).AmbientBrightness = v);
        protected static readonly RbfxAttribute<float> BackgroundBrightnessAttr = new ("Background Brightness", VariantType.VarFloat, new Variant(0f), _=>((Zone)_).BackgroundBrightness, (_,v)=>((Zone)_).BackgroundBrightness = v);
        protected static readonly RbfxAttribute<bool> IsBackgroundStaticAttr = new ("Is Background Static", VariantType.VarBool, new Variant(false), _=>((Zone)_).IsBackgroundStatic, (_,v)=>((Zone)_).IsBackgroundStatic = v);
        protected static readonly RbfxAttribute<Color> FogColorAttr = new ("Fog Color", VariantType.VarColor, new Variant(new Color(0f, 0f, 0f, 1f)), _=>((Zone)_).FogColor, (_,v)=>((Zone)_).FogColor = v);
        protected static readonly RbfxAttribute<float> FogStartAttr = new ("Fog Start", VariantType.VarFloat, new Variant(250f), _=>((Zone)_).FogStart, (_,v)=>((Zone)_).FogStart = v);
        protected static readonly RbfxAttribute<float> FogEndAttr = new ("Fog End", VariantType.VarFloat, new Variant(1000f), _=>((Zone)_).FogEnd, (_,v)=>((Zone)_).FogEnd = v);
        protected static readonly RbfxAttribute<float> FogHeightAttr = new ("Fog Height", VariantType.VarFloat, new Variant(0f), _=>((Zone)_).FogHeight, (_,v)=>((Zone)_).FogHeight = v);
        protected static readonly RbfxAttribute<float> FogHeightScaleAttr = new ("Fog Height Scale", VariantType.VarFloat, new Variant(0.5f), _=>((Zone)_).FogHeightScale, (_,v)=>((Zone)_).FogHeightScale = v);
        protected static readonly RbfxAttribute<bool> HeightFogModeAttr = new ("Height Fog Mode", VariantType.VarBool, new Variant(false), _=>((Zone)_).HeightFogMode, (_,v)=>((Zone)_).HeightFogMode = v);
        protected static readonly RbfxAttribute<bool> OverrideModeAttr = new ("Override Mode", VariantType.VarBool, new Variant(false), _=>((Zone)_).OverrideMode, (_,v)=>((Zone)_).OverrideMode = v);
        protected static readonly RbfxAttribute<bool> AmbientGradientAttr = new ("Ambient Gradient", VariantType.VarBool, new Variant(false), _=>((Zone)_).AmbientGradient, (_,v)=>((Zone)_).AmbientGradient = v);
        protected static readonly RbfxAttribute<int> PriorityAttr = new ("Priority", VariantType.VarInt, new Variant(0), _=>((Zone)_).Priority, (_,v)=>((Zone)_).Priority = v);
        protected static readonly RbfxAttribute<ResourceRef> ZoneTextureAttr = new ("Zone Texture", VariantType.VarResourceRef, new Variant(new ResourceRef("TextureCube", "")), _=>((Zone)_).ZoneTexture, (_,v)=>((Zone)_).ZoneTexture = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return BoundingBoxMinAttr;
            yield return BoundingBoxMaxAttr;
            yield return AmbientColorAttr;
            yield return AmbientBrightnessAttr;
            yield return BackgroundBrightnessAttr;
            yield return IsBackgroundStaticAttr;
            yield return FogColorAttr;
            yield return FogStartAttr;
            yield return FogEndAttr;
            yield return FogHeightAttr;
            yield return FogHeightScaleAttr;
            yield return HeightFogModeAttr;
            yield return OverrideModeAttr;
            yield return AmbientGradientAttr;
            yield return PriorityAttr;
            yield return ZoneTextureAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected Vector3 _boundingBoxMin = new Vector3(-10f, -10f, -10f);

        protected Vector3 _boundingBoxMax = new Vector3(10f, 10f, 10f);

        protected Color _ambientColor = new Color(0.1f, 0.1f, 0.1f, 1f);

        protected float _ambientBrightness = 1f;

        protected float _backgroundBrightness = 0f;

        protected bool _isBackgroundStatic = false;

        protected Color _fogColor = new Color(0f, 0f, 0f, 1f);

        protected float _fogStart = 250f;

        protected float _fogEnd = 1000f;

        protected float _fogHeight = 0f;

        protected float _fogHeightScale = 0.5f;

        protected bool _heightFogMode = false;

        protected bool _overrideMode = false;

        protected bool _ambientGradient = false;

        protected int _priority = 0;

        protected ResourceRef _zoneTexture = new ResourceRef("TextureCube", "");

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public Vector3 BoundingBoxMin
        {
            get => _boundingBoxMin;
            set => _boundingBoxMin = value;
        }

        public Vector3 BoundingBoxMax
        {
            get => _boundingBoxMax;
            set => _boundingBoxMax = value;
        }

        public Color AmbientColor
        {
            get => _ambientColor;
            set => _ambientColor = value;
        }

        public float AmbientBrightness
        {
            get => _ambientBrightness;
            set => _ambientBrightness = value;
        }

        public float BackgroundBrightness
        {
            get => _backgroundBrightness;
            set => _backgroundBrightness = value;
        }

        public bool IsBackgroundStatic
        {
            get => _isBackgroundStatic;
            set => _isBackgroundStatic = value;
        }

        public Color FogColor
        {
            get => _fogColor;
            set => _fogColor = value;
        }

        public float FogStart
        {
            get => _fogStart;
            set => _fogStart = value;
        }

        public float FogEnd
        {
            get => _fogEnd;
            set => _fogEnd = value;
        }

        public float FogHeight
        {
            get => _fogHeight;
            set => _fogHeight = value;
        }

        public float FogHeightScale
        {
            get => _fogHeightScale;
            set => _fogHeightScale = value;
        }

        public bool HeightFogMode
        {
            get => _heightFogMode;
            set => _heightFogMode = value;
        }

        public bool OverrideMode
        {
            get => _overrideMode;
            set => _overrideMode = value;
        }

        public bool AmbientGradient
        {
            get => _ambientGradient;
            set => _ambientGradient = value;
        }

        public int Priority
        {
            get => _priority;
            set => _priority = value;
        }

        public ResourceRef ZoneTexture
        {
            get => _zoneTexture;
            set => _zoneTexture = value;
        }
    }
}

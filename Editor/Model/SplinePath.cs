// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class SplinePath: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<string> InterpolationModeAttr = new ("Interpolation Mode", VariantType.VarString, new Variant(UnityToRebelFork.Editor.InterpolationMode.Bezier), _=>((SplinePath)_).InterpolationMode, (_,v)=>((SplinePath)_).InterpolationMode = v);
        protected static readonly RbfxAttribute<float> SpeedAttr = new ("Speed", VariantType.VarFloat, new Variant(1f), _=>((SplinePath)_).Speed, (_,v)=>((SplinePath)_).Speed = v);
        protected static readonly RbfxAttribute<float> TraveledAttr = new ("Traveled", VariantType.VarFloat, new Variant(0f), _=>((SplinePath)_).Traveled, (_,v)=>((SplinePath)_).Traveled = v);
        protected static readonly RbfxAttribute<float> ElapsedTimeAttr = new ("Elapsed Time", VariantType.VarFloat, new Variant(0f), _=>((SplinePath)_).ElapsedTime, (_,v)=>((SplinePath)_).ElapsedTime = v);
        protected static readonly RbfxAttribute<int> ControlledAttr = new ("Controlled", VariantType.VarInt, new Variant(0), _=>((SplinePath)_).Controlled, (_,v)=>((SplinePath)_).Controlled = v);
        protected static readonly RbfxAttribute<VariantList> ControlPointsAttr = new ("Control Points", VariantType.VarVariantList, new Variant(new VariantList() {  }), _=>((SplinePath)_).ControlPoints, (_,v)=>((SplinePath)_).ControlPoints = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return InterpolationModeAttr;
            yield return SpeedAttr;
            yield return TraveledAttr;
            yield return ElapsedTimeAttr;
            yield return ControlledAttr;
            yield return ControlPointsAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected string _interpolationMode = UnityToRebelFork.Editor.InterpolationMode.Bezier;

        protected float _speed = 1f;

        protected float _traveled = 0f;

        protected float _elapsedTime = 0f;

        protected int _controlled = 0;

        protected VariantList _controlPoints = new VariantList() {  };

        public string InterpolationMode
        {
            get => _interpolationMode;
            set => _interpolationMode = value;
        }

        public float Speed
        {
            get => _speed;
            set => _speed = value;
        }

        public float Traveled
        {
            get => _traveled;
            set => _traveled = value;
        }

        public float ElapsedTime
        {
            get => _elapsedTime;
            set => _elapsedTime = value;
        }

        public int Controlled
        {
            get => _controlled;
            set => _controlled = value;
        }

        public VariantList ControlPoints
        {
            get => _controlPoints;
            set => _controlPoints = value;
        }
    }
}

// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class StaticModel: UnityToRebelFork.Editor.Drawable
    {
        protected static readonly RbfxAttribute<bool> IsEnabledAttr = new ("Is Enabled", VariantType.VarBool, new Variant(true), _=>((StaticModel)_).IsEnabled, (_,v)=>((StaticModel)_).IsEnabled = v);
        protected static readonly RbfxAttribute<ResourceRef> ModelAttr = new ("Model", VariantType.VarResourceRef, new Variant(new ResourceRef("Model", "")), _=>((StaticModel)_).Model, (_,v)=>((StaticModel)_).Model = v);
        protected static readonly RbfxAttribute<ResourceRefList> MaterialAttr = new ("Material", VariantType.VarResourceRefList, new Variant(new ResourceRefList("Material") { }), _=>((StaticModel)_).Material, (_,v)=>((StaticModel)_).Material = v);
        protected static readonly RbfxAttribute<bool> IsOccluderAttr = new ("Is Occluder", VariantType.VarBool, new Variant(false), _=>((StaticModel)_).IsOccluder, (_,v)=>((StaticModel)_).IsOccluder = v);
        protected static readonly RbfxAttribute<bool> CanBeOccludedAttr = new ("Can Be Occluded", VariantType.VarBool, new Variant(true), _=>((StaticModel)_).CanBeOccluded, (_,v)=>((StaticModel)_).CanBeOccluded = v);
        protected static readonly RbfxAttribute<bool> CastShadowsAttr = new ("Cast Shadows", VariantType.VarBool, new Variant(false), _=>((StaticModel)_).CastShadows, (_,v)=>((StaticModel)_).CastShadows = v);
        protected static readonly RbfxAttribute<float> DrawDistanceAttr = new ("Draw Distance", VariantType.VarFloat, new Variant(0f), _=>((StaticModel)_).DrawDistance, (_,v)=>((StaticModel)_).DrawDistance = v);
        protected static readonly RbfxAttribute<float> ShadowDistanceAttr = new ("Shadow Distance", VariantType.VarFloat, new Variant(0f), _=>((StaticModel)_).ShadowDistance, (_,v)=>((StaticModel)_).ShadowDistance = v);
        protected static readonly RbfxAttribute<float> LODBiasAttr = new ("LOD Bias", VariantType.VarFloat, new Variant(1f), _=>((StaticModel)_).LODBias, (_,v)=>((StaticModel)_).LODBias = v);
        protected static readonly RbfxAttribute<int> OcclusionLODLevelAttr = new ("Occlusion LOD Level", VariantType.VarInt, new Variant(-1), _=>((StaticModel)_).OcclusionLODLevel, (_,v)=>((StaticModel)_).OcclusionLODLevel = v);
        protected static readonly RbfxAttribute<bool> BakeLightmapAttr = new ("Bake Lightmap", VariantType.VarBool, new Variant(false), _=>((StaticModel)_).BakeLightmap, (_,v)=>((StaticModel)_).BakeLightmap = v);
        protected static readonly RbfxAttribute<float> ScaleinLightmapAttr = new ("Scale in Lightmap", VariantType.VarFloat, new Variant(1f), _=>((StaticModel)_).ScaleinLightmap, (_,v)=>((StaticModel)_).ScaleinLightmap = v);
        protected static readonly RbfxAttribute<int> LightmapIndexAttr = new ("Lightmap Index", VariantType.VarInt, new Variant(0), _=>((StaticModel)_).LightmapIndex, (_,v)=>((StaticModel)_).LightmapIndex = v);
        protected static readonly RbfxAttribute<Vector4> LightmapScaleOffsetAttr = new ("Lightmap Scale & Offset", VariantType.VarVector4, new Variant(new Vector4(1f, 1f, 0f, 0f)), _=>((StaticModel)_).LightmapScaleOffset, (_,v)=>((StaticModel)_).LightmapScaleOffset = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return IsEnabledAttr;
            yield return ModelAttr;
            yield return MaterialAttr;
            yield return IsOccluderAttr;
            yield return CanBeOccludedAttr;
            yield return CastShadowsAttr;
            yield return DrawDistanceAttr;
            yield return ShadowDistanceAttr;
            yield return LODBiasAttr;
            yield return OcclusionLODLevelAttr;
            yield return BakeLightmapAttr;
            yield return ScaleinLightmapAttr;
            yield return LightmapIndexAttr;
            yield return LightmapScaleOffsetAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected bool _isEnabled = true;

        protected ResourceRef _model = new ResourceRef("Model", "");

        protected ResourceRefList _material = new ResourceRefList("Material") { };

        protected bool _isOccluder = false;

        protected bool _canBeOccluded = true;

        protected bool _castShadows = false;

        protected float _drawDistance = 0f;

        protected float _shadowDistance = 0f;

        protected float _lODBias = 1f;

        protected int _occlusionLODLevel = -1;

        protected bool _bakeLightmap = false;

        protected float _scaleinLightmap = 1f;

        protected int _lightmapIndex = 0;

        protected Vector4 _lightmapScaleOffset = new Vector4(1f, 1f, 0f, 0f);

        public bool IsEnabled
        {
            get => _isEnabled;
            set => _isEnabled = value;
        }

        public ResourceRef Model
        {
            get => _model;
            set => _model = value;
        }

        public ResourceRefList Material
        {
            get => _material;
            set => _material = value;
        }

        public bool IsOccluder
        {
            get => _isOccluder;
            set => _isOccluder = value;
        }

        public bool CanBeOccluded
        {
            get => _canBeOccluded;
            set => _canBeOccluded = value;
        }

        public bool CastShadows
        {
            get => _castShadows;
            set => _castShadows = value;
        }

        public float DrawDistance
        {
            get => _drawDistance;
            set => _drawDistance = value;
        }

        public float ShadowDistance
        {
            get => _shadowDistance;
            set => _shadowDistance = value;
        }

        public float LODBias
        {
            get => _lODBias;
            set => _lODBias = value;
        }

        public int OcclusionLODLevel
        {
            get => _occlusionLODLevel;
            set => _occlusionLODLevel = value;
        }

        public bool BakeLightmap
        {
            get => _bakeLightmap;
            set => _bakeLightmap = value;
        }

        public float ScaleinLightmap
        {
            get => _scaleinLightmap;
            set => _scaleinLightmap = value;
        }

        public int LightmapIndex
        {
            get => _lightmapIndex;
            set => _lightmapIndex = value;
        }

        public Vector4 LightmapScaleOffset
        {
            get => _lightmapScaleOffset;
            set => _lightmapScaleOffset = value;
        }
    }
}

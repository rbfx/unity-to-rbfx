// <auto-generated />

using System.Collections.Generic;
using UnityEngine;

namespace UnityToRebelFork.Editor
{
    public partial class CrowdAgent: UnityToRebelFork.Editor.Component
    {
        protected static readonly RbfxAttribute<Vector3> TargetPositionAttr = new ("Target Position", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((CrowdAgent)_).TargetPosition, (_,v)=>((CrowdAgent)_).TargetPosition = v);
        protected static readonly RbfxAttribute<Vector3> TargetVelocityAttr = new ("Target Velocity", VariantType.VarVector3, new Variant(new Vector3(0f, 0f, 0f)), _=>((CrowdAgent)_).TargetVelocity, (_,v)=>((CrowdAgent)_).TargetVelocity = v);
        protected static readonly RbfxAttribute<string> RequestedTargetTypeAttr = new ("Requested Target Type", VariantType.VarString, new Variant(UnityToRebelFork.Editor.RequestedTargetType.None), _=>((CrowdAgent)_).RequestedTargetType, (_,v)=>((CrowdAgent)_).RequestedTargetType = v);
        protected static readonly RbfxAttribute<bool> UpdateNodePositionAttr = new ("Update Node Position", VariantType.VarBool, new Variant(true), _=>((CrowdAgent)_).UpdateNodePosition, (_,v)=>((CrowdAgent)_).UpdateNodePosition = v);
        protected static readonly RbfxAttribute<float> MaxAccelAttr = new ("Max Accel", VariantType.VarFloat, new Variant(0f), _=>((CrowdAgent)_).MaxAccel, (_,v)=>((CrowdAgent)_).MaxAccel = v);
        protected static readonly RbfxAttribute<float> MaxSpeedAttr = new ("Max Speed", VariantType.VarFloat, new Variant(0f), _=>((CrowdAgent)_).MaxSpeed, (_,v)=>((CrowdAgent)_).MaxSpeed = v);
        protected static readonly RbfxAttribute<float> RadiusAttr = new ("Radius", VariantType.VarFloat, new Variant(0f), _=>((CrowdAgent)_).Radius, (_,v)=>((CrowdAgent)_).Radius = v);
        protected static readonly RbfxAttribute<float> HeightAttr = new ("Height", VariantType.VarFloat, new Variant(0f), _=>((CrowdAgent)_).Height, (_,v)=>((CrowdAgent)_).Height = v);
        protected static readonly RbfxAttribute<int> QueryFilterTypeAttr = new ("Query Filter Type", VariantType.VarInt, new Variant(0), _=>((CrowdAgent)_).QueryFilterType, (_,v)=>((CrowdAgent)_).QueryFilterType = v);
        protected static readonly RbfxAttribute<int> ObstacleAvoidanceTypeAttr = new ("Obstacle Avoidance Type", VariantType.VarInt, new Variant(0), _=>((CrowdAgent)_).ObstacleAvoidanceType, (_,v)=>((CrowdAgent)_).ObstacleAvoidanceType = v);
        protected static readonly RbfxAttribute<string> NavigationPushinessAttr = new ("Navigation Pushiness", VariantType.VarString, new Variant(UnityToRebelFork.Editor.NavigationPushiness.Medium), _=>((CrowdAgent)_).NavigationPushiness, (_,v)=>((CrowdAgent)_).NavigationPushiness = v);
        protected static readonly RbfxAttribute<string> NavigationQualityAttr = new ("Navigation Quality", VariantType.VarString, new Variant(UnityToRebelFork.Editor.NavigationQuality.High), _=>((CrowdAgent)_).NavigationQuality, (_,v)=>((CrowdAgent)_).NavigationQuality = v);

        public override IEnumerable<RbfxAttribute> GetTypeAttributes()
        {
            yield return TargetPositionAttr;
            yield return TargetVelocityAttr;
            yield return RequestedTargetTypeAttr;
            yield return UpdateNodePositionAttr;
            yield return MaxAccelAttr;
            yield return MaxSpeedAttr;
            yield return RadiusAttr;
            yield return HeightAttr;
            yield return QueryFilterTypeAttr;
            yield return ObstacleAvoidanceTypeAttr;
            yield return NavigationPushinessAttr;
            yield return NavigationQualityAttr;
            foreach (var a in base.GetTypeAttributes()) yield return a;
        }

        protected Vector3 _targetPosition = new Vector3(0f, 0f, 0f);

        protected Vector3 _targetVelocity = new Vector3(0f, 0f, 0f);

        protected string _requestedTargetType = UnityToRebelFork.Editor.RequestedTargetType.None;

        protected bool _updateNodePosition = true;

        protected float _maxAccel = 0f;

        protected float _maxSpeed = 0f;

        protected float _radius = 0f;

        protected float _height = 0f;

        protected int _queryFilterType = 0;

        protected int _obstacleAvoidanceType = 0;

        protected string _navigationPushiness = UnityToRebelFork.Editor.NavigationPushiness.Medium;

        protected string _navigationQuality = UnityToRebelFork.Editor.NavigationQuality.High;

        public Vector3 TargetPosition
        {
            get => _targetPosition;
            set => _targetPosition = value;
        }

        public Vector3 TargetVelocity
        {
            get => _targetVelocity;
            set => _targetVelocity = value;
        }

        public string RequestedTargetType
        {
            get => _requestedTargetType;
            set => _requestedTargetType = value;
        }

        public bool UpdateNodePosition
        {
            get => _updateNodePosition;
            set => _updateNodePosition = value;
        }

        public float MaxAccel
        {
            get => _maxAccel;
            set => _maxAccel = value;
        }

        public float MaxSpeed
        {
            get => _maxSpeed;
            set => _maxSpeed = value;
        }

        public float Radius
        {
            get => _radius;
            set => _radius = value;
        }

        public float Height
        {
            get => _height;
            set => _height = value;
        }

        public int QueryFilterType
        {
            get => _queryFilterType;
            set => _queryFilterType = value;
        }

        public int ObstacleAvoidanceType
        {
            get => _obstacleAvoidanceType;
            set => _obstacleAvoidanceType = value;
        }

        public string NavigationPushiness
        {
            get => _navigationPushiness;
            set => _navigationPushiness = value;
        }

        public string NavigationQuality
        {
            get => _navigationQuality;
            set => _navigationQuality = value;
        }
    }
}

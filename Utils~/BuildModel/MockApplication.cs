using System.Collections;
using System.Globalization;
using System.Text;
using System.Xml.Linq;
using Urho3DNet;
using Console = System.Console;
using File = System.IO.File;

public class MockApplication : Application
{
    private readonly DirectoryInfo _outputFolder;
    private readonly static Dictionary<VariantType, string> _varTypeMap;
    private readonly static HashSet<string> _visitedEnums = new HashSet<string>();
    private readonly static Dictionary<StringHash, string> _hashStrings = new Dictionary<StringHash, string>();

    private string _namespace = "UnityToRebelFork.Editor";

    static MockApplication()
    {
        _varTypeMap = new Dictionary<VariantType, string>()
        {
            { VariantType.VarBool, "bool" },
            { VariantType.VarInt, "int" },
            { VariantType.VarFloat, "float" },
            { VariantType.VarString, "string" },
            { VariantType.VarStringList, "IList<string>" },
            { VariantType.VarVector2, "Vector2" },
            { VariantType.VarVector3, "Vector3" },
            { VariantType.VarVector4, "Vector4" },
            { VariantType.VarIntVector2, "IntVector2" },
            { VariantType.VarIntVector3, "IntVector3" },
            { VariantType.VarQuaternion, "Quaternion" },
            { VariantType.VarBuffer, "Buffer" },
            { VariantType.VarColor, "Color" },
            { VariantType.VarRect, "Rect" },
            { VariantType.VarIntRect, "IntRect" },
            { VariantType.VarResourceRef, "ResourceRef" },
            { VariantType.VarResourceRefList, "ResourceRefList" },
            { VariantType.VarVariantList, "VariantList" },
            { VariantType.VarVariantMap, "VariantMap" },
            { VariantType.VarStringvariantmap, "Dictionary<string,Variant>" },
        };
    }

    public MockApplication(Context context, DirectoryInfo outputFolder) : base(context)
    {
        _outputFolder = outputFolder;
        if (!_outputFolder.Exists)
        {
            _outputFolder.Create();
        }
    }

    public override void Setup()
    {
        base.Setup();
        EngineParameters[Urho3D.EpHeadless] = true;
    }

    public override void Start()
    {
        base.Start();
        SubscribeToEvent(E.Update, HandleUpdate);
    }

    private void HandleUpdate(StringHash arg1, VariantMap arg2)
    {
        try
        {
            //foreach (var objectReflection in Context.GetObjectReflections())
            {
                foreach (var type in typeof(Context).Module.GetTypes())
                {
                    _hashStrings[new StringHash(type.Name)] = type.Name;
                }
                foreach (var type in typeof(Context).Module.GetTypes())
                {
                    if (typeof(Urho3DNet.Object).IsAssignableFrom(type))
                    {
                        var reflection = Context.GetReflection(type.Name);
                        var parentReflection = Context.GetReflection(type.BaseType.Name);
                        var outputPath = Path.Combine(_outputFolder.FullName, $"{type.Name}.cs");
                        var localAttrs = EvaluateLocalAttributes(type, reflection, parentReflection);
                        File.WriteAllText(outputPath, BuildSource(type, localAttrs), new UTF8Encoding(false));

                        foreach (var localAttr in localAttrs)
                        {
                            if (localAttr.IsEnum())
                            {
                                var name = GetPropertyName(localAttr.Name, type.Name);
                                if (_visitedEnums.Add(name))
                                {
                                    outputPath = Path.Combine(_outputFolder.FullName, $"{name}.cs");
                                    File.WriteAllText(outputPath, BuildEnum(name, localAttr), new UTF8Encoding(false));
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            GetSubsystem<Engine>().Exit();
        }
    }

    private string? BuildEnum(string name, AttributeInfo reflectionAttribute)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine();
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine();
        sb.AppendLine($"namespace {_namespace}");
        sb.AppendLine("{");
        sb.AppendLine($"   public static class {name}");
        sb.AppendLine("    {");
        for (uint i = 0; i < reflectionAttribute.GetNumEnumNames(); ++i)
        {
            var value = reflectionAttribute.ConvertEnumToString(i);
            sb.AppendLine(
                $"        public static readonly string {GetPropertyName(value, string.Empty)} = \"{value}\";");
        }
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    private string? BuildSource(Type type, IList<AttributeInfo> localAttrs)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine();
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine();
        sb.AppendLine($"namespace {_namespace}");
        sb.AppendLine("{");
        sb.AppendLine($"    public partial class {type.Name}: {_namespace}.{type.BaseType.Name}");
        sb.AppendLine("    {");
        foreach (var reflectionAttribute in localAttrs)
        {
            var name = GetPropertyName(reflectionAttribute.Name, type.Name);
            var attrType = reflectionAttribute.IsEnum() ? VariantType.VarString : reflectionAttribute.Type;
            var varType = _varTypeMap[attrType];
            var sharpDefaultValue = ToSharp(reflectionAttribute.DefaultValue, reflectionAttribute, type.Name);
            if (reflectionAttribute.IsEnum())
            {
                attrType = VariantType.VarString;
            }
            sb.AppendLine(
                $"        protected static readonly RbfxAttribute<{varType}> {name}Attr = new (\"{reflectionAttribute.Name}\", VariantType.{attrType}, new Variant({sharpDefaultValue}), _=>(({type.Name})_).{name}, (_,v)=>(({type.Name})_).{name} = v);");
        }
        sb.AppendLine();
        sb.AppendLine($"        public override IEnumerable<RbfxAttribute> GetTypeAttributes()");
        sb.AppendLine($"        {{");
        foreach (var attr in localAttrs)
        {
            sb.AppendLine($"            yield return {GetPropertyName(attr.Name, type.Name)}Attr;");
        }
        sb.AppendLine($"            foreach (var a in base.GetTypeAttributes()) yield return a;");
        sb.AppendLine($"        }}");
        foreach (var reflectionAttribute in localAttrs)
        {
            sb.AppendLine();
            var name = GetFieldName(reflectionAttribute.Name, type.Name);
            var attrType = reflectionAttribute.IsEnum() ? VariantType.VarString : reflectionAttribute.Type;
            var varType = _varTypeMap[attrType];
            sb.AppendLine($"        protected {varType} {name} = {ToSharp(reflectionAttribute.DefaultValue, reflectionAttribute, type.Name)};");
        }
        foreach (var reflectionAttribute in localAttrs)
        {
            sb.AppendLine();
            var fieldName = GetFieldName(reflectionAttribute.Name, type.Name);
            var name = GetPropertyName(reflectionAttribute.Name, type.Name);
            var attrType = reflectionAttribute.IsEnum() ? VariantType.VarString : reflectionAttribute.Type;
            var varType = _varTypeMap[attrType];
            sb.AppendLine($"        public {varType} {name}");
            sb.AppendLine($"        {{");
            sb.AppendLine($"            get => {fieldName};");
            sb.AppendLine($"            set => {fieldName} = value;");
            sb.AppendLine($"        }}");
        }
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    private IList<AttributeInfo> EvaluateLocalAttributes(Type type, ObjectReflection reflection, ObjectReflection parentReflection)
    {
        if (reflection == null)
            return Array.Empty<AttributeInfo>();

        List<AttributeInfo> parentAttrs = new List<AttributeInfo>();
        if (parentReflection != null)
        {
            parentAttrs = parentReflection.Attributes
                .Where(_ => !_.Name.EndsWith("!"))
                .Where(_ => !_.Name.EndsWith("+"))
                .ToList();
        }

        var parentAttrsSet = parentAttrs.Select(_ => _.Name).ToHashSet();
        var allAttrs = reflection.Attributes
            .Where(_ => !_.Name.EndsWith("!"))
            .Where(_ => !_.Name.EndsWith("+"))
            .ToList();
        return allAttrs
            .Where(_ => !parentAttrsSet.Contains(_.Name))
            .ToList();
    }

    private string ToSharp(float value)
    {
        return value.ToString(CultureInfo.InvariantCulture) + "f";
    }
    private string ToSharp(int value)
    {
        return value.ToString(CultureInfo.InvariantCulture);
    }
    private string ToSharp(StringHash value)
    {
        if (_hashStrings.TryGetValue(value, out var str))
        {
            return ToSharp(str);
        }
        return ToSharp(Context.GetTypeName(value));
    }
    private string ToSharp(string value)
    {
        return $"\"{value}\"";
    }

    private string ToSharp(Variant value)
    {
        return ToSharp(value, null, null);
    }

    private string ToSharp(Variant value, AttributeInfo attributeInfo, string typeName)
    {
        switch (value.Type)
        {
            case VariantType.VarBool:
                return value.Bool ? "true" : "false";
            case VariantType.VarInt:
                if (attributeInfo.IsEnum())
                    return ToSharpEnum(value.Int, attributeInfo, typeName);
                return ToSharp(value.Int);
            case VariantType.VarFloat:
                return ToSharp(value.Float);
            case VariantType.VarString:
                return ToSharp(value.String);
            case VariantType.VarResourceRef:
                return $"new ResourceRef({ToSharp(value.ResourceRef.Type)}, {ToSharp(value.ResourceRef.Name)})";
            case VariantType.VarVector2:
                return $"new Vector2({ToSharp(value.Vector2.X)}, {ToSharp(value.Vector2.Y)})" ;
            case VariantType.VarVector3:
                return $"new Vector3({ToSharp(value.Vector3.X)}, {ToSharp(value.Vector3.Y)}, {ToSharp(value.Vector3.Z)})";
            case VariantType.VarIntVector2:
                return $"new IntVector2({ToSharp(value.IntVector2.X)}, {ToSharp(value.IntVector2.Y)})";
            case VariantType.VarIntVector3:
                return $"new IntVector3({ToSharp(value.IntVector3.X)}, {ToSharp(value.IntVector3.Y)}, {ToSharp(value.IntVector3.Z)})";
            case VariantType.VarVector4:
                return $"new Vector4({ToSharp(value.Vector4.X)}, {ToSharp(value.Vector4.Y)}, {ToSharp(value.Vector4.Z)}, {ToSharp(value.Vector4.W)})";
            case VariantType.VarQuaternion:
                return $"new Quaternion({ToSharp(value.Quaternion.X)}, {ToSharp(value.Quaternion.Y)}, {ToSharp(value.Quaternion.Z)}, {ToSharp(value.Quaternion.W)})";
            case VariantType.VarColor:
                return $"new Color({ToSharp(value.Color.R)}, {ToSharp(value.Color.G)}, {ToSharp(value.Color.B)}, {ToSharp(value.Color.A)})";
            case VariantType.VarRect:
                return $"new Rect({ToSharp(value.Rect.Left)}, {ToSharp(value.Rect.Top)}, {ToSharp(value.Rect.Right)}, {ToSharp(value.Rect.Bottom)})";
            case VariantType.VarIntRect:
                return $"new IntRect({ToSharp(value.IntRect.Left)}, {ToSharp(value.IntRect.Top)}, {ToSharp(value.IntRect.Right)}, {ToSharp(value.IntRect.Bottom)})";
            case VariantType.VarVariantList:
                return $"new VariantList() {{ {string.Join(", ", value.VariantVector.Select(ToSharp))} }}";
            case VariantType.VarStringList:
                return $"new List<string>() {{ {string.Join(", ", value.StringVector.Select(ToSharp))} }}";
            case VariantType.VarResourceRefList:
                return $"new ResourceRefList({ToSharp(value.ResourceRefList.Type)}) {{ }}";
            case VariantType.VarStringvariantmap:
                return $"new Dictionary<string,Variant>() {{ {string.Join(", ", value.StringVariantMap)} }}";
            case VariantType.VarVariantMap:
                return $"new VariantMap()";
            case VariantType.VarBuffer:
                return $"new Buffer()";
            default:
                throw new NotImplementedException();
        }
    }

    private string ToSharpEnum(int valueInt, AttributeInfo reflectionAttribute, string typeName)
    {
        var enumTypeName = GetPropertyName(reflectionAttribute.Name, typeName);
        var enumValue = GetPropertyName(reflectionAttribute.ConvertEnumToString((uint)valueInt), string.Empty);
        return $"{_namespace}.{enumTypeName}.{enumValue}";
    }

    private string GetPropertyName(string reflectionAttributeName, string typeName)
    {
        if (!char.IsLetter(reflectionAttributeName[0]))
            reflectionAttributeName = "_"+reflectionAttributeName;
        reflectionAttributeName = reflectionAttributeName
            .Replace(" ", "")
            .Replace(".", "")
            .Replace("-", "")
            .Replace("&", "")
            .Replace("/", "");
        var indexOfOpenBracket = reflectionAttributeName.IndexOf('(');
        if (indexOfOpenBracket >= 0)
        {
            var indexOfCloseBracket = reflectionAttributeName.LastIndexOf(')');
            if (indexOfCloseBracket < 0)
                reflectionAttributeName = reflectionAttributeName.Substring(0, indexOfOpenBracket);
            else
                reflectionAttributeName = reflectionAttributeName.Substring(0, indexOfOpenBracket) +
                                          reflectionAttributeName.Substring(indexOfCloseBracket + 1);
        }

        if (reflectionAttributeName == typeName || reflectionAttributeName == "GlobalIllumination")
        {
            reflectionAttributeName = reflectionAttributeName + "Value";
        }

        return reflectionAttributeName;
    }

    private string GetFieldName(string reflectionAttributeName, string typeName)
    {
        reflectionAttributeName = GetPropertyName(reflectionAttributeName, typeName);
        reflectionAttributeName = "_"+char.ToLower(reflectionAttributeName[0]) + reflectionAttributeName.Substring(1);
        return reflectionAttributeName;
    }
}